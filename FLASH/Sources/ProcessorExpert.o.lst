   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ProcessorExpert.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	InData,6,4
  18              		.comm	mma845_tmp,2,2
  19              		.comm	LtcInData,7,4
  20              		.comm	MyI2CPtr,4,4
  21              		.comm	MyTimerPtr,4,4
  22              		.comm	Myout_I2CPtr,4,4
  23              		.section	.bss.ADC_value,"aw",%nobits
  24              		.align	2
  27              	ADC_value:
  28 0000 00000000 		.space	4
  29              		.comm	ADC_koniec,1,1
  30              		.comm	Voltage,8,4
  31              		.global	__aeabi_f2d
  32              		.section	.rodata
  33              		.align	2
  34              	.LC9:
  35 0000 74696C74 		.ascii	"tilt =  %d  ang_pos =ERORR  ADC1: %d ADC2: %d\000"
  35      203D2020 
  35      25642020 
  35      616E675F 
  35      706F7320 
  36 002e 0000     		.align	2
  37              	.LC11:
  38 0030 74696C74 		.ascii	"tilt =  %d  ang_pos =  %d  ADC1: %d ADC2: %d\000"
  38      203D2020 
  38      25642020 
  38      616E675F 
  38      706F7320 
  39 005d 000000   		.section	.text.main,"ax",%progbits
  40              		.align	2
  41              		.global	main
  42              		.code	16
  43              		.thumb_func
  45              	main:
  46              	.LFB0:
  47              		.file 1 "../Sources/ProcessorExpert.c"
   1:../Sources/ProcessorExpert.c **** /** ###################################################################
   2:../Sources/ProcessorExpert.c **** **     Filename    : ProcessorExpert.c
   3:../Sources/ProcessorExpert.c **** **     Project     : ProcessorExpert
   4:../Sources/ProcessorExpert.c **** **     Processor   : MKL25Z128VLK4
   5:../Sources/ProcessorExpert.c **** **     Version     : Driver 01.01
   6:../Sources/ProcessorExpert.c **** **     Compiler    : IAR ARM C Compiler
   7:../Sources/ProcessorExpert.c **** **     Date/Time   : 2012-08-27, 15:21, # CodeGen: 0
   8:../Sources/ProcessorExpert.c **** **     Abstract    :
   9:../Sources/ProcessorExpert.c **** **         Main module.
  10:../Sources/ProcessorExpert.c **** **         This module contains user's application code.
  11:../Sources/ProcessorExpert.c **** **     Settings    :
  12:../Sources/ProcessorExpert.c **** **     Contents    :
  13:../Sources/ProcessorExpert.c **** **         No public methods
  14:../Sources/ProcessorExpert.c **** **
  15:../Sources/ProcessorExpert.c **** ** ###################################################################*/
  16:../Sources/ProcessorExpert.c **** /* MODULE ProcessorExpert */
  17:../Sources/ProcessorExpert.c **** 
  18:../Sources/ProcessorExpert.c **** 
  19:../Sources/ProcessorExpert.c **** /* Including needed modules to compile this module/procedure */
  20:../Sources/ProcessorExpert.c **** #include "Cpu.h"
  21:../Sources/ProcessorExpert.c **** #include "Events.h"
  22:../Sources/ProcessorExpert.c **** #include "I2C2.h"
  23:../Sources/ProcessorExpert.c **** #include "out_I2C.h"
  24:../Sources/ProcessorExpert.c **** #include "AD1.h"
  25:../Sources/ProcessorExpert.c **** #include "AdcLdd1.h"
  26:../Sources/ProcessorExpert.c **** #include "IO1.h"
  27:../Sources/ProcessorExpert.c **** #include "WAIT1.h"
  28:../Sources/ProcessorExpert.c **** #include "LEDgreen.h"
  29:../Sources/ProcessorExpert.c **** #include "LEDpin1.h"
  30:../Sources/ProcessorExpert.c **** #include "BitIoLdd1.h"
  31:../Sources/ProcessorExpert.c **** #include "LEDred.h"
  32:../Sources/ProcessorExpert.c **** #include "LEDpin2.h"
  33:../Sources/ProcessorExpert.c **** #include "BitIoLdd2.h"
  34:../Sources/ProcessorExpert.c **** #include "out_I2C.h"
  35:../Sources/ProcessorExpert.c **** #include "TU1.h"
  36:../Sources/ProcessorExpert.c **** #include "CsIO1.h"
  37:../Sources/ProcessorExpert.c **** /* Including shared modules, which are used for whole project */
  38:../Sources/ProcessorExpert.c **** #include "PE_Types.h"
  39:../Sources/ProcessorExpert.c **** #include "PE_Error.h"
  40:../Sources/ProcessorExpert.c **** #include "PE_Const.h"
  41:../Sources/ProcessorExpert.c **** #include "IO_Map.h"
  42:../Sources/ProcessorExpert.c **** 
  43:../Sources/ProcessorExpert.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  44:../Sources/ProcessorExpert.c **** #include "stdio.h"
  45:../Sources/ProcessorExpert.c **** #include "AS5040.h"
  46:../Sources/ProcessorExpert.c **** #include "mma8453.h"
  47:../Sources/ProcessorExpert.c **** #include "LTC2945.h"
  48:../Sources/ProcessorExpert.c **** #include "adc_data.h"
  49:../Sources/ProcessorExpert.c **** 
  50:../Sources/ProcessorExpert.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  51:../Sources/ProcessorExpert.c **** extern AS5040data as5040data;
  52:../Sources/ProcessorExpert.c **** extern MMA845X mma845x;
  53:../Sources/ProcessorExpert.c **** extern LTC2945 ltc2945;
  54:../Sources/ProcessorExpert.c **** 
  55:../Sources/ProcessorExpert.c **** 
  56:../Sources/ProcessorExpert.c **** LDD_TDeviceData *MyI2CPtr;
  57:../Sources/ProcessorExpert.c **** LDD_TDeviceData *MyTimerPtr;
  58:../Sources/ProcessorExpert.c **** LDD_TDeviceData *Myout_I2CPtr;
  59:../Sources/ProcessorExpert.c **** 
  60:../Sources/ProcessorExpert.c **** 
  61:../Sources/ProcessorExpert.c **** 
  62:../Sources/ProcessorExpert.c **** static uint16_t ADC_value[AD1_CHANNEL_COUNT];
  63:../Sources/ProcessorExpert.c **** volatile bool ADC_koniec;
  64:../Sources/ProcessorExpert.c **** float Voltage[AD1_CHANNEL_COUNT];
  65:../Sources/ProcessorExpert.c **** 
  66:../Sources/ProcessorExpert.c **** 
  67:../Sources/ProcessorExpert.c **** 
  68:../Sources/ProcessorExpert.c **** int main(void)
  69:../Sources/ProcessorExpert.c **** {
  48              		.loc 1 69 0
  49              		.cfi_startproc
  50 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  51              	.LCFI0:
  52              		.cfi_def_cfa_offset 20
  53              		.cfi_offset 4, -20
  54              		.cfi_offset 5, -16
  55              		.cfi_offset 6, -12
  56              		.cfi_offset 7, -8
  57              		.cfi_offset 14, -4
  58 0002 4F46     		mov	r7, r9
  59 0004 4646     		mov	r6, r8
  60 0006 C0B4     		push	{r6, r7}
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 28
  63              		.cfi_offset 8, -28
  64              		.cfi_offset 9, -24
  65 0008 87B0     		sub	sp, sp, #28
  66              	.LCFI2:
  67              		.cfi_def_cfa_offset 56
  68 000a 04AF     		add	r7, sp, #16
  69              	.LCFI3:
  70              		.cfi_def_cfa 7, 40
  70:../Sources/ProcessorExpert.c **** 	uint16_t i=0;
  71              		.loc 1 70 0
  72 000c BB1D     		add	r3, r7, #6
  73 000e 0022     		mov	r2, #0
  74 0010 1A80     		strh	r2, [r3]
  71:../Sources/ProcessorExpert.c **** 
  72:../Sources/ProcessorExpert.c **** 	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  73:../Sources/ProcessorExpert.c **** 	PE_low_level_init();
  75              		.loc 1 73 0
  76 0012 FFF7FEFF 		bl	PE_low_level_init
  74:../Sources/ProcessorExpert.c **** 	/*** End of Processor Expert internal initialization. 
  75:../Sources/ProcessorExpert.c **** 	 *                    ***/
  76:../Sources/ProcessorExpert.c **** 	LEDred_Off();
  77              		.loc 1 76 0
  78 0016 504B     		ldr	r3, .L6
  79 0018 1B69     		ldr	r3, [r3, #16]
  80 001a 181C     		mov	r0, r3
  81 001c FFF7FEFF 		bl	BitIoLdd2_SetVal
  77:../Sources/ProcessorExpert.c **** 	LEDgreen_Off();
  82              		.loc 1 77 0
  83 0020 4D4B     		ldr	r3, .L6
  84 0022 DB68     		ldr	r3, [r3, #12]
  85 0024 181C     		mov	r0, r3
  86 0026 FFF7FEFF 		bl	BitIoLdd1_SetVal
  78:../Sources/ProcessorExpert.c **** 	// Inicjacja I2C
  79:../Sources/ProcessorExpert.c **** 	MyI2CPtr = I2C2_Init(NULL); //mma88453
  87              		.loc 1 79 0
  88 002a 0020     		mov	r0, #0
  89 002c FFF7FEFF 		bl	I2C2_Init
  90 0030 021C     		mov	r2, r0
  91 0032 4A4B     		ldr	r3, .L6+4
  92 0034 1A60     		str	r2, [r3]
  80:../Sources/ProcessorExpert.c **** 	Myout_I2CPtr = out_I2C_Init(NULL); //LTC2945
  93              		.loc 1 80 0
  94 0036 0020     		mov	r0, #0
  95 0038 FFF7FEFF 		bl	out_I2C_Init
  96 003c 021C     		mov	r2, r0
  97 003e 484B     		ldr	r3, .L6+8
  98 0040 1A60     		str	r2, [r3]
  81:../Sources/ProcessorExpert.c **** 	// Inicjacja Timera (for I2C)
  82:../Sources/ProcessorExpert.c **** 	MyTimerPtr = TU1_Init(NULL);
  99              		.loc 1 82 0
 100 0042 0020     		mov	r0, #0
 101 0044 FFF7FEFF 		bl	TU1_Init
 102 0048 021C     		mov	r2, r0
 103 004a 464B     		ldr	r3, .L6+12
 104 004c 1A60     		str	r2, [r3]
  83:../Sources/ProcessorExpert.c **** 
  84:../Sources/ProcessorExpert.c **** 
  85:../Sources/ProcessorExpert.c **** 	// Inicjacja Akcelerometru MMA855X
  86:../Sources/ProcessorExpert.c **** 	MMA845X_Init();
 105              		.loc 1 86 0
 106 004e FFF7FEFF 		bl	MMA845X_Init
  87:../Sources/ProcessorExpert.c **** 	//LTC2945_Init();
  88:../Sources/ProcessorExpert.c **** 	AS5040_Init();
 107              		.loc 1 88 0
 108 0052 FFF7FEFF 		bl	AS5040_Init
  89:../Sources/ProcessorExpert.c **** 	(void)AD1_Measure(TRUE);
 109              		.loc 1 89 0
 110 0056 0120     		mov	r0, #1
 111 0058 FFF7FEFF 		bl	AD1_Measure
 112              	.L5:
  90:../Sources/ProcessorExpert.c **** 
  91:../Sources/ProcessorExpert.c **** 	for(;;)
  92:../Sources/ProcessorExpert.c **** 	{
  93:../Sources/ProcessorExpert.c **** 		//	  i++;
  94:../Sources/ProcessorExpert.c **** 		//	 WAIT1_WaitOSms(10);
  95:../Sources/ProcessorExpert.c **** 		//	 if(i%25==0)
  96:../Sources/ProcessorExpert.c **** 		//	 LEDgreen_Neg();
  97:../Sources/ProcessorExpert.c **** 		AS5040_data_parser();
 113              		.loc 1 97 0
 114 005c FFF7FEFF 		bl	AS5040_data_parser
  98:../Sources/ProcessorExpert.c **** 		MMA845X_Poll();
 115              		.loc 1 98 0
 116 0060 FFF7FEFF 		bl	MMA845X_Poll
  99:../Sources/ProcessorExpert.c **** 		//LTC2945_Poll();
 100:../Sources/ProcessorExpert.c **** 		if (ADC_koniec){
 117              		.loc 1 100 0
 118 0064 404B     		ldr	r3, .L6+16
 119 0066 1B78     		ldrb	r3, [r3]
 120 0068 DBB2     		uxtb	r3, r3
 121 006a 002B     		cmp	r3, #0
 122 006c 09D0     		beq	.L2
 101:../Sources/ProcessorExpert.c **** 		(void)AD1_GetValue16(&ADC_value[0]);
 123              		.loc 1 101 0
 124 006e 3F4B     		ldr	r3, .L6+20
 125 0070 181C     		mov	r0, r3
 126 0072 FFF7FEFF 		bl	AD1_GetValue16
 102:../Sources/ProcessorExpert.c **** 		ADC_koniec=FALSE;
 127              		.loc 1 102 0
 128 0076 3C4B     		ldr	r3, .L6+16
 129 0078 0022     		mov	r2, #0
 130 007a 1A70     		strb	r2, [r3]
 103:../Sources/ProcessorExpert.c **** 		(void)AD1_Measure(TRUE);
 131              		.loc 1 103 0
 132 007c 0120     		mov	r0, #1
 133 007e FFF7FEFF 		bl	AD1_Measure
 134              	.L2:
 104:../Sources/ProcessorExpert.c **** 		}
 105:../Sources/ProcessorExpert.c **** 		
 106:../Sources/ProcessorExpert.c **** 		Voltage[0]=vlotage_scaling(ADC_value[0]);
 135              		.loc 1 106 0
 136 0082 3A4B     		ldr	r3, .L6+20
 137 0084 1B88     		ldrh	r3, [r3]
 138 0086 181C     		mov	r0, r3
 139 0088 FFF7FEFF 		bl	vlotage_scaling
 140 008c 021C     		add	r2, r0, #0
 141 008e 384B     		ldr	r3, .L6+24
 142 0090 1A60     		str	r2, [r3]
 107:../Sources/ProcessorExpert.c **** 		Voltage[1]=vlotage_scaling(ADC_value[1]);
 143              		.loc 1 107 0
 144 0092 364B     		ldr	r3, .L6+20
 145 0094 5B88     		ldrh	r3, [r3, #2]
 146 0096 181C     		mov	r0, r3
 147 0098 FFF7FEFF 		bl	vlotage_scaling
 148 009c 021C     		add	r2, r0, #0
 149 009e 344B     		ldr	r3, .L6+24
 150 00a0 5A60     		str	r2, [r3, #4]
 108:../Sources/ProcessorExpert.c **** 		
 109:../Sources/ProcessorExpert.c **** 		
 110:../Sources/ProcessorExpert.c **** 		if(as5040data.Erorr){
 151              		.loc 1 110 0
 152 00a2 344B     		ldr	r3, .L6+28
 153 00a4 1B7A     		ldrb	r3, [r3, #8]
 154 00a6 002B     		cmp	r3, #0
 155 00a8 27D0     		beq	.L3
 111:../Sources/ProcessorExpert.c **** 			LEDgreen_Off();
 156              		.loc 1 111 0
 157 00aa 2B4B     		ldr	r3, .L6
 158 00ac DB68     		ldr	r3, [r3, #12]
 159 00ae 181C     		mov	r0, r3
 160 00b0 FFF7FEFF 		bl	BitIoLdd1_SetVal
 112:../Sources/ProcessorExpert.c **** 			LEDred_On();
 161              		.loc 1 112 0
 162 00b4 284B     		ldr	r3, .L6
 163 00b6 1B69     		ldr	r3, [r3, #16]
 164 00b8 181C     		mov	r0, r3
 165 00ba FFF7FEFF 		bl	BitIoLdd2_ClrVal
 113:../Sources/ProcessorExpert.c **** 			printf("tilt =  %d  ang_pos =ERORR  ADC1: %d ADC2: %d", mma845x.y, Voltage[0],Voltage[1]);
 166              		.loc 1 113 0
 167 00be 2E4B     		ldr	r3, .L6+32
 168 00c0 5B88     		ldrh	r3, [r3, #2]
 169 00c2 1EB2     		sxth	r6, r3
 170 00c4 2A4B     		ldr	r3, .L6+24
 171 00c6 1B68     		ldr	r3, [r3]
 172 00c8 181C     		add	r0, r3, #0
 173 00ca FFF7FEFF 		bl	__aeabi_f2d
 174 00ce 041C     		mov	r4, r0
 175 00d0 0D1C     		mov	r5, r1
 176 00d2 274B     		ldr	r3, .L6+24
 177 00d4 5B68     		ldr	r3, [r3, #4]
 178 00d6 181C     		add	r0, r3, #0
 179 00d8 FFF7FEFF 		bl	__aeabi_f2d
 180 00dc 021C     		mov	r2, r0
 181 00de 0B1C     		mov	r3, r1
 182 00e0 2649     		ldr	r1, .L6+36
 183 00e2 0092     		str	r2, [sp]
 184 00e4 0193     		str	r3, [sp, #4]
 185 00e6 081C     		mov	r0, r1
 186 00e8 311C     		mov	r1, r6
 187 00ea 221C     		mov	r2, r4
 188 00ec 2B1C     		mov	r3, r5
 189 00ee FFF7FEFF 		bl	printf
 114:../Sources/ProcessorExpert.c **** 			printf("\n");
 190              		.loc 1 114 0
 191 00f2 0A20     		mov	r0, #10
 192 00f4 FFF7FEFF 		bl	putchar
 115:../Sources/ProcessorExpert.c **** 		}
 116:../Sources/ProcessorExpert.c **** 		else{
 117:../Sources/ProcessorExpert.c **** 			LEDgreen_On();
 118:../Sources/ProcessorExpert.c **** 			LEDred_Off();
 119:../Sources/ProcessorExpert.c **** 			printf("tilt =  %d  ang_pos =  %d  ADC1: %d ADC2: %d", mma845x.y, as5040data.ang_position,Voltag
 120:../Sources/ProcessorExpert.c **** 			printf("\n");
 121:../Sources/ProcessorExpert.c **** 		}
 122:../Sources/ProcessorExpert.c **** 
 123:../Sources/ProcessorExpert.c **** 
 124:../Sources/ProcessorExpert.c **** 	}
 193              		.loc 1 124 0
 194 00f8 B0E7     		b	.L5
 195              	.L3:
 117:../Sources/ProcessorExpert.c **** 			LEDgreen_On();
 196              		.loc 1 117 0
 197 00fa 174B     		ldr	r3, .L6
 198 00fc DB68     		ldr	r3, [r3, #12]
 199 00fe 181C     		mov	r0, r3
 200 0100 FFF7FEFF 		bl	BitIoLdd1_ClrVal
 118:../Sources/ProcessorExpert.c **** 			LEDred_Off();
 201              		.loc 1 118 0
 202 0104 144B     		ldr	r3, .L6
 203 0106 1B69     		ldr	r3, [r3, #16]
 204 0108 181C     		mov	r0, r3
 205 010a FFF7FEFF 		bl	BitIoLdd2_SetVal
 119:../Sources/ProcessorExpert.c **** 			printf("tilt =  %d  ang_pos =  %d  ADC1: %d ADC2: %d", mma845x.y, as5040data.ang_position,Voltag
 206              		.loc 1 119 0
 207 010e 1A4B     		ldr	r3, .L6+32
 208 0110 5B88     		ldrh	r3, [r3, #2]
 209 0112 1AB2     		sxth	r2, r3
 210 0114 9146     		mov	r9, r2
 211 0116 174B     		ldr	r3, .L6+28
 212 0118 1B88     		ldrh	r3, [r3]
 213 011a 1AB2     		sxth	r2, r3
 214 011c 9046     		mov	r8, r2
 215 011e 144B     		ldr	r3, .L6+24
 216 0120 1B68     		ldr	r3, [r3]
 217 0122 181C     		add	r0, r3, #0
 218 0124 FFF7FEFF 		bl	__aeabi_f2d
 219 0128 051C     		mov	r5, r0
 220 012a 0E1C     		mov	r6, r1
 221 012c 104B     		ldr	r3, .L6+24
 222 012e 5B68     		ldr	r3, [r3, #4]
 223 0130 181C     		add	r0, r3, #0
 224 0132 FFF7FEFF 		bl	__aeabi_f2d
 225 0136 031C     		mov	r3, r0
 226 0138 0C1C     		mov	r4, r1
 227 013a 114A     		ldr	r2, .L6+40
 228 013c 0095     		str	r5, [sp]
 229 013e 0196     		str	r6, [sp, #4]
 230 0140 0293     		str	r3, [sp, #8]
 231 0142 0394     		str	r4, [sp, #12]
 232 0144 101C     		mov	r0, r2
 233 0146 4946     		mov	r1, r9
 234 0148 4246     		mov	r2, r8
 235 014a FFF7FEFF 		bl	printf
 120:../Sources/ProcessorExpert.c **** 			printf("\n");
 236              		.loc 1 120 0
 237 014e 0A20     		mov	r0, #10
 238 0150 FFF7FEFF 		bl	putchar
 239              		.loc 1 124 0
 240 0154 82E7     		b	.L5
 241              	.L7:
 242 0156 C046     		.align	2
 243              	.L6:
 244 0158 00000000 		.word	PE_LDD_DeviceDataList
 245 015c 00000000 		.word	MyI2CPtr
 246 0160 00000000 		.word	Myout_I2CPtr
 247 0164 00000000 		.word	MyTimerPtr
 248 0168 00000000 		.word	ADC_koniec
 249 016c 00000000 		.word	ADC_value
 250 0170 00000000 		.word	Voltage
 251 0174 00000000 		.word	as5040data
 252 0178 00000000 		.word	mma845x
 253 017c 00000000 		.word	.LC9
 254 0180 30000000 		.word	.LC11
 255              		.cfi_endproc
 256              	.LFE0:
 258              		.text
 259              	.Letext0:
 260              		.file 2 "D:/CodeWarrior/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 261              		.file 3 "D:/PlikiI/Synergia/Jacht/workspace_yacht/I2C_1/Generated_Code/PE_Types.h"
 262              		.file 4 "../Sources/AS5040.h"
 263              		.file 5 "../Sources/mma8453.h"
 264              		.file 6 "../Sources/LTC2945.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ProcessorExpert.c
                            *COM*:00000006 InData
                            *COM*:00000002 mma845_tmp
                            *COM*:00000007 LtcInData
                            *COM*:00000004 MyI2CPtr
                            *COM*:00000004 MyTimerPtr
                            *COM*:00000004 Myout_I2CPtr
C:\Users\SKRA~1\AppData\Local\Temp\ccP7P0hk.s:24     .bss.ADC_value:00000000 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccP7P0hk.s:27     .bss.ADC_value:00000000 ADC_value
                            *COM*:00000001 ADC_koniec
                            *COM*:00000008 Voltage
C:\Users\SKRA~1\AppData\Local\Temp\ccP7P0hk.s:33     .rodata:00000000 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccP7P0hk.s:40     .text.main:00000000 $t
C:\Users\SKRA~1\AppData\Local\Temp\ccP7P0hk.s:45     .text.main:00000000 main
C:\Users\SKRA~1\AppData\Local\Temp\ccP7P0hk.s:244    .text.main:00000158 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_f2d
PE_low_level_init
BitIoLdd2_SetVal
BitIoLdd1_SetVal
I2C2_Init
out_I2C_Init
TU1_Init
MMA845X_Init
AS5040_Init
AD1_Measure
AS5040_data_parser
MMA845X_Poll
AD1_GetValue16
vlotage_scaling
BitIoLdd2_ClrVal
printf
putchar
BitIoLdd1_ClrVal
PE_LDD_DeviceDataList
as5040data
mma845x
