   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ProcessorExpert.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	InData,6,4
  18              		.comm	mma845_tmp,2,2
  19              		.comm	LtcInData,7,4
  20              		.comm	MyI2CPtr,4,4
  21              		.comm	MyTimerPtr,4,4
  22              		.comm	Myout_I2CPtr,4,4
  23              		.section	.bss.ADC_value,"aw",%nobits
  24              		.align	2
  27              	ADC_value:
  28 0000 00000000 		.space	4
  29              		.comm	ADC_koniec,1,1
  30              		.comm	Voltage,4,4
  31              		.comm	Current,4,4
  32              		.comm	Power,4,4
  33              		.comm	volt,4,4
  34              		.comm	powe,4,4
  35              		.comm	curr,4,4
  36              		.global	__aeabi_fmul
  37              		.global	__aeabi_f2iz
  38              		.section	.rodata
  39              		.align	2
  40              	.LC14:
  41 0000 74696C74 		.ascii	"tilt =  %d  ang_pos =ERORR  U: %d I: %d P: %d\000"
  41      203D2020 
  41      25642020 
  41      616E675F 
  41      706F7320 
  42 002e 0000     		.align	2
  43              	.LC16:
  44 0030 74696C74 		.ascii	"tilt =  %d  ang_pos =  %d  U: %d I: %d P: %d\000"
  44      203D2020 
  44      25642020 
  44      616E675F 
  44      706F7320 
  45 005d 000000   		.section	.text.main,"ax",%progbits
  46              		.align	2
  47              		.global	main
  48              		.code	16
  49              		.thumb_func
  51              	main:
  52              	.LFB0:
  53              		.file 1 "../Sources/ProcessorExpert.c"
   1:../Sources/ProcessorExpert.c **** /** ###################################################################
   2:../Sources/ProcessorExpert.c **** **     Filename    : ProcessorExpert.c
   3:../Sources/ProcessorExpert.c **** **     Project     : ProcessorExpert
   4:../Sources/ProcessorExpert.c **** **     Processor   : MKL25Z128VLK4
   5:../Sources/ProcessorExpert.c **** **     Version     : Driver 01.01
   6:../Sources/ProcessorExpert.c **** **     Compiler    : IAR ARM C Compiler
   7:../Sources/ProcessorExpert.c **** **     Date/Time   : 2012-08-27, 15:21, # CodeGen: 0
   8:../Sources/ProcessorExpert.c **** **     Abstract    :
   9:../Sources/ProcessorExpert.c **** **         Main module.
  10:../Sources/ProcessorExpert.c **** **         This module contains user's application code.
  11:../Sources/ProcessorExpert.c **** **     Settings    :
  12:../Sources/ProcessorExpert.c **** **     Contents    :
  13:../Sources/ProcessorExpert.c **** **         No public methods
  14:../Sources/ProcessorExpert.c **** **
  15:../Sources/ProcessorExpert.c **** ** ###################################################################*/
  16:../Sources/ProcessorExpert.c **** /* MODULE ProcessorExpert */
  17:../Sources/ProcessorExpert.c **** 
  18:../Sources/ProcessorExpert.c **** 
  19:../Sources/ProcessorExpert.c **** /* Including needed modules to compile this module/procedure */
  20:../Sources/ProcessorExpert.c **** #include "Cpu.h"
  21:../Sources/ProcessorExpert.c **** #include "Events.h"
  22:../Sources/ProcessorExpert.c **** #include "I2C2.h"
  23:../Sources/ProcessorExpert.c **** #include "out_I2C.h"
  24:../Sources/ProcessorExpert.c **** #include "AD1.h"
  25:../Sources/ProcessorExpert.c **** #include "AdcLdd1.h"
  26:../Sources/ProcessorExpert.c **** #include "IO1.h"
  27:../Sources/ProcessorExpert.c **** #include "WAIT1.h"
  28:../Sources/ProcessorExpert.c **** #include "LEDgreen.h"
  29:../Sources/ProcessorExpert.c **** #include "LEDpin1.h"
  30:../Sources/ProcessorExpert.c **** #include "BitIoLdd1.h"
  31:../Sources/ProcessorExpert.c **** #include "LEDred.h"
  32:../Sources/ProcessorExpert.c **** #include "LEDpin2.h"
  33:../Sources/ProcessorExpert.c **** #include "BitIoLdd2.h"
  34:../Sources/ProcessorExpert.c **** #include "out_I2C.h"
  35:../Sources/ProcessorExpert.c **** #include "TU1.h"
  36:../Sources/ProcessorExpert.c **** #include "CsIO1.h"
  37:../Sources/ProcessorExpert.c **** /* Including shared modules, which are used for whole project */
  38:../Sources/ProcessorExpert.c **** #include "PE_Types.h"
  39:../Sources/ProcessorExpert.c **** #include "PE_Error.h"
  40:../Sources/ProcessorExpert.c **** #include "PE_Const.h"
  41:../Sources/ProcessorExpert.c **** #include "IO_Map.h"
  42:../Sources/ProcessorExpert.c **** 
  43:../Sources/ProcessorExpert.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  44:../Sources/ProcessorExpert.c **** #include "stdio.h"
  45:../Sources/ProcessorExpert.c **** #include "AS5040.h"
  46:../Sources/ProcessorExpert.c **** #include "mma8453.h"
  47:../Sources/ProcessorExpert.c **** #include "LTC2945.h"
  48:../Sources/ProcessorExpert.c **** #include "adc_data.h"
  49:../Sources/ProcessorExpert.c **** 
  50:../Sources/ProcessorExpert.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  51:../Sources/ProcessorExpert.c **** extern AS5040data as5040data;
  52:../Sources/ProcessorExpert.c **** extern MMA845X mma845x;
  53:../Sources/ProcessorExpert.c **** extern LTC2945 ltc2945;
  54:../Sources/ProcessorExpert.c **** 
  55:../Sources/ProcessorExpert.c **** 
  56:../Sources/ProcessorExpert.c **** LDD_TDeviceData *MyI2CPtr;
  57:../Sources/ProcessorExpert.c **** LDD_TDeviceData *MyTimerPtr;
  58:../Sources/ProcessorExpert.c **** LDD_TDeviceData *Myout_I2CPtr;
  59:../Sources/ProcessorExpert.c **** 
  60:../Sources/ProcessorExpert.c **** 
  61:../Sources/ProcessorExpert.c **** 
  62:../Sources/ProcessorExpert.c **** static uint16_t ADC_value[AD1_CHANNEL_COUNT];
  63:../Sources/ProcessorExpert.c **** volatile bool ADC_koniec;
  64:../Sources/ProcessorExpert.c **** float Voltage;
  65:../Sources/ProcessorExpert.c **** float Current;
  66:../Sources/ProcessorExpert.c **** float Power;
  67:../Sources/ProcessorExpert.c **** 
  68:../Sources/ProcessorExpert.c **** int volt;
  69:../Sources/ProcessorExpert.c **** int powe;
  70:../Sources/ProcessorExpert.c **** int curr;
  71:../Sources/ProcessorExpert.c **** 
  72:../Sources/ProcessorExpert.c **** int main(void)
  73:../Sources/ProcessorExpert.c **** {
  54              		.loc 1 73 0
  55              		.cfi_startproc
  56 0000 B0B5     		push	{r4, r5, r7, lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 4, -16
  60              		.cfi_offset 5, -12
  61              		.cfi_offset 7, -8
  62              		.cfi_offset 14, -4
  63 0002 84B0     		sub	sp, sp, #16
  64              	.LCFI1:
  65              		.cfi_def_cfa_offset 32
  66 0004 02AF     		add	r7, sp, #8
  67              	.LCFI2:
  68              		.cfi_def_cfa 7, 24
  74:../Sources/ProcessorExpert.c **** 	uint16_t i=0;
  69              		.loc 1 74 0
  70 0006 BB1D     		add	r3, r7, #6
  71 0008 0022     		mov	r2, #0
  72 000a 1A80     		strh	r2, [r3]
  75:../Sources/ProcessorExpert.c **** 
  76:../Sources/ProcessorExpert.c **** 	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  77:../Sources/ProcessorExpert.c **** 	PE_low_level_init();
  73              		.loc 1 77 0
  74 000c FFF7FEFF 		bl	PE_low_level_init
  78:../Sources/ProcessorExpert.c **** 	/*** End of Processor Expert internal initialization. 
  79:../Sources/ProcessorExpert.c **** 	 *                    ***/
  80:../Sources/ProcessorExpert.c **** 	LEDred_Off();
  75              		.loc 1 80 0
  76 0010 604B     		ldr	r3, .L6
  77 0012 1B69     		ldr	r3, [r3, #16]
  78 0014 181C     		mov	r0, r3
  79 0016 FFF7FEFF 		bl	BitIoLdd2_SetVal
  81:../Sources/ProcessorExpert.c **** 	LEDgreen_Off();
  80              		.loc 1 81 0
  81 001a 5E4B     		ldr	r3, .L6
  82 001c DB68     		ldr	r3, [r3, #12]
  83 001e 181C     		mov	r0, r3
  84 0020 FFF7FEFF 		bl	BitIoLdd1_SetVal
  82:../Sources/ProcessorExpert.c **** 	// Inicjacja I2C
  83:../Sources/ProcessorExpert.c **** 	MyI2CPtr = I2C2_Init(NULL); //mma88453
  85              		.loc 1 83 0
  86 0024 0020     		mov	r0, #0
  87 0026 FFF7FEFF 		bl	I2C2_Init
  88 002a 021C     		mov	r2, r0
  89 002c 5A4B     		ldr	r3, .L6+4
  90 002e 1A60     		str	r2, [r3]
  84:../Sources/ProcessorExpert.c **** 	Myout_I2CPtr = out_I2C_Init(NULL); //LTC2945
  91              		.loc 1 84 0
  92 0030 0020     		mov	r0, #0
  93 0032 FFF7FEFF 		bl	out_I2C_Init
  94 0036 021C     		mov	r2, r0
  95 0038 584B     		ldr	r3, .L6+8
  96 003a 1A60     		str	r2, [r3]
  85:../Sources/ProcessorExpert.c **** 	// Inicjacja Timera (for I2C)
  86:../Sources/ProcessorExpert.c **** 	MyTimerPtr = TU1_Init(NULL);
  97              		.loc 1 86 0
  98 003c 0020     		mov	r0, #0
  99 003e FFF7FEFF 		bl	TU1_Init
 100 0042 021C     		mov	r2, r0
 101 0044 564B     		ldr	r3, .L6+12
 102 0046 1A60     		str	r2, [r3]
  87:../Sources/ProcessorExpert.c **** 
  88:../Sources/ProcessorExpert.c **** 
  89:../Sources/ProcessorExpert.c **** 	// Inicjacja Akcelerometru MMA855X
  90:../Sources/ProcessorExpert.c **** 	MMA845X_Init();
 103              		.loc 1 90 0
 104 0048 FFF7FEFF 		bl	MMA845X_Init
  91:../Sources/ProcessorExpert.c **** 	//LTC2945_Init();
  92:../Sources/ProcessorExpert.c **** 	AS5040_Init();
 105              		.loc 1 92 0
 106 004c FFF7FEFF 		bl	AS5040_Init
  93:../Sources/ProcessorExpert.c **** 	(void)AD1_Measure(TRUE);
 107              		.loc 1 93 0
 108 0050 0120     		mov	r0, #1
 109 0052 FFF7FEFF 		bl	AD1_Measure
 110              	.L5:
  94:../Sources/ProcessorExpert.c **** 
  95:../Sources/ProcessorExpert.c **** 	for(;;)
  96:../Sources/ProcessorExpert.c **** 	{
  97:../Sources/ProcessorExpert.c **** 		//	  i++;
  98:../Sources/ProcessorExpert.c **** 		//	 WAIT1_WaitOSms(10);
  99:../Sources/ProcessorExpert.c **** 		//	 if(i%25==0)
 100:../Sources/ProcessorExpert.c **** 		//	 LEDgreen_Neg();
 101:../Sources/ProcessorExpert.c **** 		AS5040_data_parser();
 111              		.loc 1 101 0
 112 0056 FFF7FEFF 		bl	AS5040_data_parser
 102:../Sources/ProcessorExpert.c **** 		MMA845X_Poll();
 113              		.loc 1 102 0
 114 005a FFF7FEFF 		bl	MMA845X_Poll
 103:../Sources/ProcessorExpert.c **** 		//LTC2945_Poll();
 104:../Sources/ProcessorExpert.c **** 		if (ADC_koniec){
 115              		.loc 1 104 0
 116 005e 514B     		ldr	r3, .L6+16
 117 0060 1B78     		ldrb	r3, [r3]
 118 0062 DBB2     		uxtb	r3, r3
 119 0064 002B     		cmp	r3, #0
 120 0066 09D0     		beq	.L2
 105:../Sources/ProcessorExpert.c **** 		(void)AD1_GetValue16(&ADC_value[0]);
 121              		.loc 1 105 0
 122 0068 4F4B     		ldr	r3, .L6+20
 123 006a 181C     		mov	r0, r3
 124 006c FFF7FEFF 		bl	AD1_GetValue16
 106:../Sources/ProcessorExpert.c **** 		ADC_koniec=FALSE;
 125              		.loc 1 106 0
 126 0070 4C4B     		ldr	r3, .L6+16
 127 0072 0022     		mov	r2, #0
 128 0074 1A70     		strb	r2, [r3]
 107:../Sources/ProcessorExpert.c **** 		(void)AD1_Measure(TRUE);
 129              		.loc 1 107 0
 130 0076 0120     		mov	r0, #1
 131 0078 FFF7FEFF 		bl	AD1_Measure
 132              	.L2:
 108:../Sources/ProcessorExpert.c **** 		}
 109:../Sources/ProcessorExpert.c **** 		
 110:../Sources/ProcessorExpert.c **** 		
 111:../Sources/ProcessorExpert.c **** 		Voltage=vlotage_scaling(ADC_value[1]);
 133              		.loc 1 111 0
 134 007c 4A4B     		ldr	r3, .L6+20
 135 007e 5B88     		ldrh	r3, [r3, #2]
 136 0080 181C     		mov	r0, r3
 137 0082 FFF7FEFF 		bl	vlotage_scaling
 138 0086 021C     		add	r2, r0, #0
 139 0088 484B     		ldr	r3, .L6+24
 140 008a 1A60     		str	r2, [r3]
 112:../Sources/ProcessorExpert.c **** 		Current=copm_current(vlotage_scaling(ADC_value[0]),Voltage);
 141              		.loc 1 112 0
 142 008c 464B     		ldr	r3, .L6+20
 143 008e 1B88     		ldrh	r3, [r3]
 144 0090 181C     		mov	r0, r3
 145 0092 FFF7FEFF 		bl	vlotage_scaling
 146 0096 021C     		add	r2, r0, #0
 147 0098 444B     		ldr	r3, .L6+24
 148 009a 1B68     		ldr	r3, [r3]
 149 009c 101C     		add	r0, r2, #0
 150 009e 191C     		add	r1, r3, #0
 151 00a0 FFF7FEFF 		bl	copm_current
 152 00a4 021C     		add	r2, r0, #0
 153 00a6 424B     		ldr	r3, .L6+28
 154 00a8 1A60     		str	r2, [r3]
 113:../Sources/ProcessorExpert.c **** 		Power=copm_current(Current,Voltage);
 155              		.loc 1 113 0
 156 00aa 414B     		ldr	r3, .L6+28
 157 00ac 1A68     		ldr	r2, [r3]
 158 00ae 3F4B     		ldr	r3, .L6+24
 159 00b0 1B68     		ldr	r3, [r3]
 160 00b2 101C     		add	r0, r2, #0
 161 00b4 191C     		add	r1, r3, #0
 162 00b6 FFF7FEFF 		bl	copm_current
 163 00ba 021C     		add	r2, r0, #0
 164 00bc 3D4B     		ldr	r3, .L6+32
 165 00be 1A60     		str	r2, [r3]
 114:../Sources/ProcessorExpert.c **** 		
 115:../Sources/ProcessorExpert.c **** 		volt=Voltage*1000;
 166              		.loc 1 115 0
 167 00c0 3A4B     		ldr	r3, .L6+24
 168 00c2 1B68     		ldr	r3, [r3]
 169 00c4 181C     		add	r0, r3, #0
 170 00c6 3C49     		ldr	r1, .L6+36
 171 00c8 FFF7FEFF 		bl	__aeabi_fmul
 172 00cc 031C     		add	r3, r0, #0
 173 00ce 181C     		add	r0, r3, #0
 174 00d0 FFF7FEFF 		bl	__aeabi_f2iz
 175 00d4 021C     		mov	r2, r0
 176 00d6 394B     		ldr	r3, .L6+40
 177 00d8 1A60     		str	r2, [r3]
 116:../Sources/ProcessorExpert.c **** 		curr=Current*1000;
 178              		.loc 1 116 0
 179 00da 354B     		ldr	r3, .L6+28
 180 00dc 1B68     		ldr	r3, [r3]
 181 00de 181C     		add	r0, r3, #0
 182 00e0 3549     		ldr	r1, .L6+36
 183 00e2 FFF7FEFF 		bl	__aeabi_fmul
 184 00e6 031C     		add	r3, r0, #0
 185 00e8 181C     		add	r0, r3, #0
 186 00ea FFF7FEFF 		bl	__aeabi_f2iz
 187 00ee 021C     		mov	r2, r0
 188 00f0 334B     		ldr	r3, .L6+44
 189 00f2 1A60     		str	r2, [r3]
 117:../Sources/ProcessorExpert.c **** 		powe=Power*1000;
 190              		.loc 1 117 0
 191 00f4 2F4B     		ldr	r3, .L6+32
 192 00f6 1B68     		ldr	r3, [r3]
 193 00f8 181C     		add	r0, r3, #0
 194 00fa 2F49     		ldr	r1, .L6+36
 195 00fc FFF7FEFF 		bl	__aeabi_fmul
 196 0100 031C     		add	r3, r0, #0
 197 0102 181C     		add	r0, r3, #0
 198 0104 FFF7FEFF 		bl	__aeabi_f2iz
 199 0108 021C     		mov	r2, r0
 200 010a 2E4B     		ldr	r3, .L6+48
 201 010c 1A60     		str	r2, [r3]
 118:../Sources/ProcessorExpert.c **** 		
 119:../Sources/ProcessorExpert.c **** 		if(as5040data.Erorr){
 202              		.loc 1 119 0
 203 010e 2E4B     		ldr	r3, .L6+52
 204 0110 1B7A     		ldrb	r3, [r3, #8]
 205 0112 002B     		cmp	r3, #0
 206 0114 1CD0     		beq	.L3
 120:../Sources/ProcessorExpert.c **** 			LEDgreen_Off();
 207              		.loc 1 120 0
 208 0116 1F4B     		ldr	r3, .L6
 209 0118 DB68     		ldr	r3, [r3, #12]
 210 011a 181C     		mov	r0, r3
 211 011c FFF7FEFF 		bl	BitIoLdd1_SetVal
 121:../Sources/ProcessorExpert.c **** 			LEDred_On();
 212              		.loc 1 121 0
 213 0120 1C4B     		ldr	r3, .L6
 214 0122 1B69     		ldr	r3, [r3, #16]
 215 0124 181C     		mov	r0, r3
 216 0126 FFF7FEFF 		bl	BitIoLdd2_ClrVal
 122:../Sources/ProcessorExpert.c **** 			printf("tilt =  %d  ang_pos =ERORR  U: %d I: %d P: %d", mma845x.y, volt,curr,powe);
 217              		.loc 1 122 0
 218 012a 284B     		ldr	r3, .L6+56
 219 012c 5B88     		ldrh	r3, [r3, #2]
 220 012e 19B2     		sxth	r1, r3
 221 0130 224B     		ldr	r3, .L6+40
 222 0132 1A68     		ldr	r2, [r3]
 223 0134 224B     		ldr	r3, .L6+44
 224 0136 1C68     		ldr	r4, [r3]
 225 0138 224B     		ldr	r3, .L6+48
 226 013a 1868     		ldr	r0, [r3]
 227 013c 244B     		ldr	r3, .L6+60
 228 013e 0090     		str	r0, [sp]
 229 0140 181C     		mov	r0, r3
 230 0142 231C     		mov	r3, r4
 231 0144 FFF7FEFF 		bl	printf
 123:../Sources/ProcessorExpert.c **** 			printf("\n");
 232              		.loc 1 123 0
 233 0148 0A20     		mov	r0, #10
 234 014a FFF7FEFF 		bl	putchar
 124:../Sources/ProcessorExpert.c **** 		}
 125:../Sources/ProcessorExpert.c **** 		else{
 126:../Sources/ProcessorExpert.c **** 			LEDgreen_On();
 127:../Sources/ProcessorExpert.c **** 			LEDred_Off();
 128:../Sources/ProcessorExpert.c **** 			printf("tilt =  %d  ang_pos =  %d  U: %d I: %d P: %d", mma845x.y, as5040data.ang_position, volt,
 129:../Sources/ProcessorExpert.c **** 			printf("\n");
 130:../Sources/ProcessorExpert.c **** 		}
 131:../Sources/ProcessorExpert.c **** 
 132:../Sources/ProcessorExpert.c **** 
 133:../Sources/ProcessorExpert.c **** 	}
 235              		.loc 1 133 0
 236 014e 82E7     		b	.L5
 237              	.L3:
 126:../Sources/ProcessorExpert.c **** 			LEDgreen_On();
 238              		.loc 1 126 0
 239 0150 104B     		ldr	r3, .L6
 240 0152 DB68     		ldr	r3, [r3, #12]
 241 0154 181C     		mov	r0, r3
 242 0156 FFF7FEFF 		bl	BitIoLdd1_ClrVal
 127:../Sources/ProcessorExpert.c **** 			LEDred_Off();
 243              		.loc 1 127 0
 244 015a 0E4B     		ldr	r3, .L6
 245 015c 1B69     		ldr	r3, [r3, #16]
 246 015e 181C     		mov	r0, r3
 247 0160 FFF7FEFF 		bl	BitIoLdd2_SetVal
 128:../Sources/ProcessorExpert.c **** 			printf("tilt =  %d  ang_pos =  %d  U: %d I: %d P: %d", mma845x.y, as5040data.ang_position, volt,
 248              		.loc 1 128 0
 249 0164 194B     		ldr	r3, .L6+56
 250 0166 5B88     		ldrh	r3, [r3, #2]
 251 0168 19B2     		sxth	r1, r3
 252 016a 174B     		ldr	r3, .L6+52
 253 016c 1B88     		ldrh	r3, [r3]
 254 016e 1AB2     		sxth	r2, r3
 255 0170 124B     		ldr	r3, .L6+40
 256 0172 1C68     		ldr	r4, [r3]
 257 0174 124B     		ldr	r3, .L6+44
 258 0176 1D68     		ldr	r5, [r3]
 259 0178 124B     		ldr	r3, .L6+48
 260 017a 1868     		ldr	r0, [r3]
 261 017c 154B     		ldr	r3, .L6+64
 262 017e 0095     		str	r5, [sp]
 263 0180 0190     		str	r0, [sp, #4]
 264 0182 181C     		mov	r0, r3
 265 0184 231C     		mov	r3, r4
 266 0186 FFF7FEFF 		bl	printf
 129:../Sources/ProcessorExpert.c **** 			printf("\n");
 267              		.loc 1 129 0
 268 018a 0A20     		mov	r0, #10
 269 018c FFF7FEFF 		bl	putchar
 270              		.loc 1 133 0
 271 0190 61E7     		b	.L5
 272              	.L7:
 273 0192 C046     		.align	2
 274              	.L6:
 275 0194 00000000 		.word	PE_LDD_DeviceDataList
 276 0198 00000000 		.word	MyI2CPtr
 277 019c 00000000 		.word	Myout_I2CPtr
 278 01a0 00000000 		.word	MyTimerPtr
 279 01a4 00000000 		.word	ADC_koniec
 280 01a8 00000000 		.word	ADC_value
 281 01ac 00000000 		.word	Voltage
 282 01b0 00000000 		.word	Current
 283 01b4 00000000 		.word	Power
 284 01b8 00007A44 		.word	1148846080
 285 01bc 00000000 		.word	volt
 286 01c0 00000000 		.word	curr
 287 01c4 00000000 		.word	powe
 288 01c8 00000000 		.word	as5040data
 289 01cc 00000000 		.word	mma845x
 290 01d0 00000000 		.word	.LC14
 291 01d4 30000000 		.word	.LC16
 292              		.cfi_endproc
 293              	.LFE0:
 295              		.text
 296              	.Letext0:
 297              		.file 2 "D:/CodeWarrior/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 298              		.file 3 "D:/PlikiI/Synergia/Jacht/workspace_yacht/I2C_1/Generated_Code/PE_Types.h"
 299              		.file 4 "../Sources/AS5040.h"
 300              		.file 5 "../Sources/mma8453.h"
 301              		.file 6 "../Sources/LTC2945.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ProcessorExpert.c
                            *COM*:00000006 InData
                            *COM*:00000002 mma845_tmp
                            *COM*:00000007 LtcInData
                            *COM*:00000004 MyI2CPtr
                            *COM*:00000004 MyTimerPtr
                            *COM*:00000004 Myout_I2CPtr
C:\Users\SKRA~1\AppData\Local\Temp\ccmd3J55.s:24     .bss.ADC_value:00000000 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccmd3J55.s:27     .bss.ADC_value:00000000 ADC_value
                            *COM*:00000001 ADC_koniec
                            *COM*:00000004 Voltage
                            *COM*:00000004 Current
                            *COM*:00000004 Power
                            *COM*:00000004 volt
                            *COM*:00000004 powe
                            *COM*:00000004 curr
C:\Users\SKRA~1\AppData\Local\Temp\ccmd3J55.s:39     .rodata:00000000 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccmd3J55.s:46     .text.main:00000000 $t
C:\Users\SKRA~1\AppData\Local\Temp\ccmd3J55.s:51     .text.main:00000000 main
C:\Users\SKRA~1\AppData\Local\Temp\ccmd3J55.s:275    .text.main:00000194 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fmul
__aeabi_f2iz
PE_low_level_init
BitIoLdd2_SetVal
BitIoLdd1_SetVal
I2C2_Init
out_I2C_Init
TU1_Init
MMA845X_Init
AS5040_Init
AD1_Measure
AS5040_data_parser
MMA845X_Poll
AD1_GetValue16
vlotage_scaling
copm_current
BitIoLdd2_ClrVal
printf
putchar
BitIoLdd1_ClrVal
PE_LDD_DeviceDataList
as5040data
mma845x
