   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ProcessorExpert.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	DataReceivedFlg
  18              		.section	.bss.DataReceivedFlg,"aw",%nobits
  21              	DataReceivedFlg:
  22 0000 00       		.space	1
  23              		.global	DataTransmittedFlg
  24              		.section	.bss.DataTransmittedFlg,"aw",%nobits
  27              	DataTransmittedFlg:
  28 0000 00       		.space	1
  29              		.global	OutData
  30              		.section	.data.OutData,"aw",%progbits
  31              		.align	2
  34              	OutData:
  35 0000 2A       		.byte	42
  36 0001 01       		.byte	1
  37              		.comm	InData,6,4
  38              		.comm	Error,2,2
  39              		.comm	MyI2CPtr,4,4
  40              		.comm	MyTimerPtr,4,4
  41              		.comm	mma845x,8,4
  42              		.comm	mma845_tmp,2,2
  43 0002 0000     		.section	.bss.measuring,"aw",%nobits
  46              	measuring:
  47 0000 00       		.space	1
  48              		.section	.data.measuring_last,"aw",%progbits
  51              	measuring_last:
  52 0000 02       		.byte	2
  53              		.comm	data,2,2
  54              		.section	.text.Timer_Interrupt_CB,"ax",%progbits
  55              		.align	2
  56              		.global	Timer_Interrupt_CB
  57              		.code	16
  58              		.thumb_func
  60              	Timer_Interrupt_CB:
  61              	.LFB0:
  62              		.file 1 "../Sources/ProcessorExpert.c"
   1:../Sources/ProcessorExpert.c **** /** ###################################################################
   2:../Sources/ProcessorExpert.c **** **     Filename    : ProcessorExpert.c
   3:../Sources/ProcessorExpert.c **** **     Project     : ProcessorExpert
   4:../Sources/ProcessorExpert.c **** **     Processor   : MKL25Z128VLK4
   5:../Sources/ProcessorExpert.c **** **     Version     : Driver 01.01
   6:../Sources/ProcessorExpert.c **** **     Compiler    : IAR ARM C Compiler
   7:../Sources/ProcessorExpert.c **** **     Date/Time   : 2012-08-27, 15:21, # CodeGen: 0
   8:../Sources/ProcessorExpert.c **** **     Abstract    :
   9:../Sources/ProcessorExpert.c **** **         Main module.
  10:../Sources/ProcessorExpert.c **** **         This module contains user's application code.
  11:../Sources/ProcessorExpert.c **** **     Settings    :
  12:../Sources/ProcessorExpert.c **** **     Contents    :
  13:../Sources/ProcessorExpert.c **** **         No public methods
  14:../Sources/ProcessorExpert.c **** **
  15:../Sources/ProcessorExpert.c **** ** ###################################################################*/
  16:../Sources/ProcessorExpert.c **** /* MODULE ProcessorExpert */
  17:../Sources/ProcessorExpert.c **** 
  18:../Sources/ProcessorExpert.c **** 
  19:../Sources/ProcessorExpert.c **** /* Including needed modules to compile this module/procedure */
  20:../Sources/ProcessorExpert.c **** #include "Cpu.h"
  21:../Sources/ProcessorExpert.c **** #include "Events.h"
  22:../Sources/ProcessorExpert.c **** #include "I2C2.h"
  23:../Sources/ProcessorExpert.c **** #include "IO1.h"
  24:../Sources/ProcessorExpert.c **** #include "WAIT1.h"
  25:../Sources/ProcessorExpert.c **** #include "LED1.h"
  26:../Sources/ProcessorExpert.c **** #include "LEDpin1.h"
  27:../Sources/ProcessorExpert.c **** #include "BitIoLdd1.h"
  28:../Sources/ProcessorExpert.c **** #include "TU1.h"
  29:../Sources/ProcessorExpert.c **** #include "CsIO1.h"
  30:../Sources/ProcessorExpert.c **** /* Including shared modules, which are used for whole project */
  31:../Sources/ProcessorExpert.c **** #include "PE_Types.h"
  32:../Sources/ProcessorExpert.c **** #include "PE_Error.h"
  33:../Sources/ProcessorExpert.c **** #include "PE_Const.h"
  34:../Sources/ProcessorExpert.c **** #include "IO_Map.h"
  35:../Sources/ProcessorExpert.c **** 
  36:../Sources/ProcessorExpert.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  37:../Sources/ProcessorExpert.c **** #include "stdio.h"
  38:../Sources/ProcessorExpert.c **** #include "ProcessorExpert.h"
  39:../Sources/ProcessorExpert.c **** #include "AS5040.h"
  40:../Sources/ProcessorExpert.c **** 
  41:../Sources/ProcessorExpert.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  42:../Sources/ProcessorExpert.c **** volatile bool DataReceivedFlg = FALSE;
  43:../Sources/ProcessorExpert.c **** volatile bool DataTransmittedFlg = FALSE;
  44:../Sources/ProcessorExpert.c **** 
  45:../Sources/ProcessorExpert.c **** uint8_t OutData[2] = {0x2A, 0x01};                // Inicjacja buforu wyjciowego 
  46:../Sources/ProcessorExpert.c **** uint8_t InData[MMA845X_BUFFER_SIZE];
  47:../Sources/ProcessorExpert.c **** LDD_TError Error;
  48:../Sources/ProcessorExpert.c **** 
  49:../Sources/ProcessorExpert.c **** LDD_TDeviceData *MyI2CPtr;
  50:../Sources/ProcessorExpert.c **** LDD_TDeviceData *MyTimerPtr;
  51:../Sources/ProcessorExpert.c **** 
  52:../Sources/ProcessorExpert.c **** MMA845X mma845x;
  53:../Sources/ProcessorExpert.c **** int16_t mma845_tmp;
  54:../Sources/ProcessorExpert.c **** extern AS5040data as5040data;
  55:../Sources/ProcessorExpert.c **** 
  56:../Sources/ProcessorExpert.c **** volatile bool DataTransmittedFlg;
  57:../Sources/ProcessorExpert.c **** volatile bool DataReceivedFlg;
  58:../Sources/ProcessorExpert.c **** 
  59:../Sources/ProcessorExpert.c **** static MMA845_STATE measuring = IDLE;
  60:../Sources/ProcessorExpert.c **** static MMA845_STATE measuring_last = RECEIVE;
  61:../Sources/ProcessorExpert.c **** 
  62:../Sources/ProcessorExpert.c **** uint16_t data;
  63:../Sources/ProcessorExpert.c **** 
  64:../Sources/ProcessorExpert.c **** /**************************************************************************//*!
  65:../Sources/ProcessorExpert.c **** * Funkcja obs³uga przerwania Timera
  66:../Sources/ProcessorExpert.c **** ******************************************************************************/
  67:../Sources/ProcessorExpert.c **** void Timer_Interrupt_CB(void)
  68:../Sources/ProcessorExpert.c **** {
  63              		.loc 1 68 0
  64              		.cfi_startproc
  65 0000 80B5     		push	{r7, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 0002 00AF     		add	r7, sp, #0
  71              	.LCFI1:
  72              		.cfi_def_cfa_register 7
  69:../Sources/ProcessorExpert.c ****   if(measuring == IDLE)
  73              		.loc 1 69 0
  74 0004 0A4B     		ldr	r3, .L4
  75 0006 1B78     		ldrb	r3, [r3]
  76 0008 002B     		cmp	r3, #0
  77 000a 0ED1     		bne	.L1
  70:../Sources/ProcessorExpert.c ****   {
  71:../Sources/ProcessorExpert.c ****     if(measuring_last == TRANSMIT)
  78              		.loc 1 71 0
  79 000c 094B     		ldr	r3, .L4+4
  80 000e 1B78     		ldrb	r3, [r3]
  81 0010 012B     		cmp	r3, #1
  82 0012 03D1     		bne	.L3
  72:../Sources/ProcessorExpert.c ****       measuring = RECEIVE; 
  83              		.loc 1 72 0
  84 0014 064B     		ldr	r3, .L4
  85 0016 0222     		mov	r2, #2
  86 0018 1A70     		strb	r2, [r3]
  87 001a 06E0     		b	.L1
  88              	.L3:
  73:../Sources/ProcessorExpert.c ****     else if(measuring_last == RECEIVE)
  89              		.loc 1 73 0
  90 001c 054B     		ldr	r3, .L4+4
  91 001e 1B78     		ldrb	r3, [r3]
  92 0020 022B     		cmp	r3, #2
  93 0022 02D1     		bne	.L1
  74:../Sources/ProcessorExpert.c ****       measuring = TRANSMIT;
  94              		.loc 1 74 0
  95 0024 024B     		ldr	r3, .L4
  96 0026 0122     		mov	r2, #1
  97 0028 1A70     		strb	r2, [r3]
  98              	.L1:
  75:../Sources/ProcessorExpert.c ****   }
  76:../Sources/ProcessorExpert.c **** }
  99              		.loc 1 76 0
 100 002a BD46     		mov	sp, r7
 101              		@ sp needed for prologue
 102 002c 80BD     		pop	{r7, pc}
 103              	.L5:
 104 002e C046     		.align	2
 105              	.L4:
 106 0030 00000000 		.word	measuring
 107 0034 00000000 		.word	measuring_last
 108              		.cfi_endproc
 109              	.LFE0:
 111              		.section	.text.MMA845X_Init,"ax",%progbits
 112              		.align	2
 113              		.global	MMA845X_Init
 114              		.code	16
 115              		.thumb_func
 117              	MMA845X_Init:
 118              	.LFB1:
  77:../Sources/ProcessorExpert.c **** 
  78:../Sources/ProcessorExpert.c **** /*****************************************************************************
  79:../Sources/ProcessorExpert.c **** * Inicjacja I2C dla  MMA845x
  80:../Sources/ProcessorExpert.c **** ******************************************************************************/
  81:../Sources/ProcessorExpert.c **** void MMA845X_Init(void)
  82:../Sources/ProcessorExpert.c **** {
 119              		.loc 1 82 0
 120              		.cfi_startproc
 121 0000 80B5     		push	{r7, lr}
 122              	.LCFI2:
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 00AF     		add	r7, sp, #0
 127              	.LCFI3:
 128              		.cfi_def_cfa_register 7
  83:../Sources/ProcessorExpert.c ****   /* Configure I2C BUS device(e.g. RTC) - Write Operation */
  84:../Sources/ProcessorExpert.c ****   Error = I2C2_MasterSendBlock(MyI2CPtr, &OutData, 2, LDD_I2C_NO_SEND_STOP); /* Send OutData (4 byt
 129              		.loc 1 84 0
 130 0004 234B     		ldr	r3, .L10
 131 0006 1A68     		ldr	r2, [r3]
 132 0008 234B     		ldr	r3, .L10+4
 133 000a 101C     		mov	r0, r2
 134 000c 191C     		mov	r1, r3
 135 000e 0222     		mov	r2, #2
 136 0010 0023     		mov	r3, #0
 137 0012 FFF7FEFF 		bl	I2C2_MasterSendBlock
 138 0016 031C     		mov	r3, r0
 139 0018 1A1C     		mov	r2, r3
 140 001a 204B     		ldr	r3, .L10+8
 141 001c 1A80     		strh	r2, [r3]
  85:../Sources/ProcessorExpert.c ****   while (!DataTransmittedFlg); 
 142              		.loc 1 85 0
 143 001e C046     		mov	r8, r8
 144              	.L7:
 145              		.loc 1 85 0 is_stmt 0
 146 0020 1F4B     		ldr	r3, .L10+12
 147 0022 1B78     		ldrb	r3, [r3]
 148 0024 DBB2     		uxtb	r3, r3
 149 0026 002B     		cmp	r3, #0
 150 0028 FAD0     		beq	.L7
  86:../Sources/ProcessorExpert.c ****   DataTransmittedFlg = FALSE;
 151              		.loc 1 86 0 is_stmt 1
 152 002a 1D4B     		ldr	r3, .L10+12
 153 002c 0022     		mov	r2, #0
 154 002e 1A70     		strb	r2, [r3]
  87:../Sources/ProcessorExpert.c ****   
  88:../Sources/ProcessorExpert.c ****   OutData[0] = MMA845X_DEVICE_ID; 
 155              		.loc 1 88 0
 156 0030 194B     		ldr	r3, .L10+4
 157 0032 0D22     		mov	r2, #13
 158 0034 1A70     		strb	r2, [r3]
  89:../Sources/ProcessorExpert.c **** 
  90:../Sources/ProcessorExpert.c ****   Error = I2C2_MasterSendBlock(MyI2CPtr, &OutData, 1, LDD_I2C_NO_SEND_STOP);
 159              		.loc 1 90 0
 160 0036 174B     		ldr	r3, .L10
 161 0038 1A68     		ldr	r2, [r3]
 162 003a 174B     		ldr	r3, .L10+4
 163 003c 101C     		mov	r0, r2
 164 003e 191C     		mov	r1, r3
 165 0040 0122     		mov	r2, #1
 166 0042 0023     		mov	r3, #0
 167 0044 FFF7FEFF 		bl	I2C2_MasterSendBlock
 168 0048 031C     		mov	r3, r0
 169 004a 1A1C     		mov	r2, r3
 170 004c 134B     		ldr	r3, .L10+8
 171 004e 1A80     		strh	r2, [r3]
  91:../Sources/ProcessorExpert.c ****   while (!DataTransmittedFlg);  
 172              		.loc 1 91 0
 173 0050 C046     		mov	r8, r8
 174              	.L8:
 175              		.loc 1 91 0 is_stmt 0
 176 0052 134B     		ldr	r3, .L10+12
 177 0054 1B78     		ldrb	r3, [r3]
 178 0056 DBB2     		uxtb	r3, r3
 179 0058 002B     		cmp	r3, #0
 180 005a FAD0     		beq	.L8
  92:../Sources/ProcessorExpert.c ****   DataTransmittedFlg = FALSE;
 181              		.loc 1 92 0 is_stmt 1
 182 005c 104B     		ldr	r3, .L10+12
 183 005e 0022     		mov	r2, #0
 184 0060 1A70     		strb	r2, [r3]
  93:../Sources/ProcessorExpert.c ****   
  94:../Sources/ProcessorExpert.c ****   Error = I2C2_MasterReceiveBlock(MyI2CPtr, &mma845x.id, 1, LDD_I2C_SEND_STOP);
 185              		.loc 1 94 0
 186 0062 0C4B     		ldr	r3, .L10
 187 0064 1A68     		ldr	r2, [r3]
 188 0066 0F4B     		ldr	r3, .L10+16
 189 0068 101C     		mov	r0, r2
 190 006a 191C     		mov	r1, r3
 191 006c 0122     		mov	r2, #1
 192 006e 0123     		mov	r3, #1
 193 0070 FFF7FEFF 		bl	I2C2_MasterReceiveBlock
 194 0074 031C     		mov	r3, r0
 195 0076 1A1C     		mov	r2, r3
 196 0078 084B     		ldr	r3, .L10+8
 197 007a 1A80     		strh	r2, [r3]
  95:../Sources/ProcessorExpert.c ****   while (!DataReceivedFlg);
 198              		.loc 1 95 0
 199 007c C046     		mov	r8, r8
 200              	.L9:
 201              		.loc 1 95 0 is_stmt 0
 202 007e 0A4B     		ldr	r3, .L10+20
 203 0080 1B78     		ldrb	r3, [r3]
 204 0082 DBB2     		uxtb	r3, r3
 205 0084 002B     		cmp	r3, #0
 206 0086 FAD0     		beq	.L9
  96:../Sources/ProcessorExpert.c ****   DataReceivedFlg = FALSE;
 207              		.loc 1 96 0 is_stmt 1
 208 0088 074B     		ldr	r3, .L10+20
 209 008a 0022     		mov	r2, #0
 210 008c 1A70     		strb	r2, [r3]
  97:../Sources/ProcessorExpert.c **** }
 211              		.loc 1 97 0
 212 008e BD46     		mov	sp, r7
 213              		@ sp needed for prologue
 214 0090 80BD     		pop	{r7, pc}
 215              	.L11:
 216 0092 C046     		.align	2
 217              	.L10:
 218 0094 00000000 		.word	MyI2CPtr
 219 0098 00000000 		.word	OutData
 220 009c 00000000 		.word	Error
 221 00a0 00000000 		.word	DataTransmittedFlg
 222 00a4 06000000 		.word	mma845x+6
 223 00a8 00000000 		.word	DataReceivedFlg
 224              		.cfi_endproc
 225              	.LFE1:
 227              		.section	.text.MMA845X_Poll,"ax",%progbits
 228              		.align	2
 229              		.global	MMA845X_Poll
 230              		.code	16
 231              		.thumb_func
 233              	MMA845X_Poll:
 234              	.LFB2:
  98:../Sources/ProcessorExpert.c **** 
  99:../Sources/ProcessorExpert.c **** /**************************************************************************//*!
 100:../Sources/ProcessorExpert.c **** *   MMA845x polling
 101:../Sources/ProcessorExpert.c **** ******************************************************************************/
 102:../Sources/ProcessorExpert.c **** void MMA845X_Poll(void)
 103:../Sources/ProcessorExpert.c **** {
 235              		.loc 1 103 0
 236              		.cfi_startproc
 237 0000 80B5     		push	{r7, lr}
 238              	.LCFI4:
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 7, -8
 241              		.cfi_offset 14, -4
 242 0002 00AF     		add	r7, sp, #0
 243              	.LCFI5:
 244              		.cfi_def_cfa_register 7
 104:../Sources/ProcessorExpert.c ****     if(measuring == TRANSMIT)
 245              		.loc 1 104 0
 246 0004 424B     		ldr	r3, .L20
 247 0006 1B78     		ldrb	r3, [r3]
 248 0008 012B     		cmp	r3, #1
 249 000a 1FD1     		bne	.L13
 105:../Sources/ProcessorExpert.c ****     {
 106:../Sources/ProcessorExpert.c ****       measuring = IDLE;
 250              		.loc 1 106 0
 251 000c 404B     		ldr	r3, .L20
 252 000e 0022     		mov	r2, #0
 253 0010 1A70     		strb	r2, [r3]
 107:../Sources/ProcessorExpert.c ****       measuring_last = TRANSMIT;
 254              		.loc 1 107 0
 255 0012 404B     		ldr	r3, .L20+4
 256 0014 0122     		mov	r2, #1
 257 0016 1A70     		strb	r2, [r3]
 108:../Sources/ProcessorExpert.c ****        
 109:../Sources/ProcessorExpert.c ****       OutData[0] = MMA845X_CFG_VALUE;
 258              		.loc 1 109 0
 259 0018 3F4B     		ldr	r3, .L20+8
 260 001a 0122     		mov	r2, #1
 261 001c 1A70     		strb	r2, [r3]
 110:../Sources/ProcessorExpert.c ****       Error = I2C2_MasterSendBlock(MyI2CPtr, &OutData, 1, LDD_I2C_NO_SEND_STOP); /* Send OutData (4
 262              		.loc 1 110 0
 263 001e 3F4B     		ldr	r3, .L20+12
 264 0020 1A68     		ldr	r2, [r3]
 265 0022 3D4B     		ldr	r3, .L20+8
 266 0024 101C     		mov	r0, r2
 267 0026 191C     		mov	r1, r3
 268 0028 0122     		mov	r2, #1
 269 002a 0023     		mov	r3, #0
 270 002c FFF7FEFF 		bl	I2C2_MasterSendBlock
 271 0030 031C     		mov	r3, r0
 272 0032 1A1C     		mov	r2, r3
 273 0034 3A4B     		ldr	r3, .L20+16
 274 0036 1A80     		strh	r2, [r3]
 111:../Sources/ProcessorExpert.c ****       while (!DataTransmittedFlg); 
 275              		.loc 1 111 0
 276 0038 C046     		mov	r8, r8
 277              	.L14:
 278              		.loc 1 111 0 is_stmt 0
 279 003a 3A4B     		ldr	r3, .L20+20
 280 003c 1B78     		ldrb	r3, [r3]
 281 003e DBB2     		uxtb	r3, r3
 282 0040 002B     		cmp	r3, #0
 283 0042 FAD0     		beq	.L14
 112:../Sources/ProcessorExpert.c ****       DataTransmittedFlg = FALSE;   
 284              		.loc 1 112 0 is_stmt 1
 285 0044 374B     		ldr	r3, .L20+20
 286 0046 0022     		mov	r2, #0
 287 0048 1A70     		strb	r2, [r3]
 288 004a 5EE0     		b	.L12
 289              	.L13:
 113:../Sources/ProcessorExpert.c ****     }
 114:../Sources/ProcessorExpert.c ****     else if(measuring == RECEIVE)
 290              		.loc 1 114 0
 291 004c 304B     		ldr	r3, .L20
 292 004e 1B78     		ldrb	r3, [r3]
 293 0050 022B     		cmp	r3, #2
 294 0052 5AD1     		bne	.L12
 115:../Sources/ProcessorExpert.c ****     {
 116:../Sources/ProcessorExpert.c ****       measuring = IDLE;
 295              		.loc 1 116 0
 296 0054 2E4B     		ldr	r3, .L20
 297 0056 0022     		mov	r2, #0
 298 0058 1A70     		strb	r2, [r3]
 117:../Sources/ProcessorExpert.c ****       measuring_last = RECEIVE;
 299              		.loc 1 117 0
 300 005a 2E4B     		ldr	r3, .L20+4
 301 005c 0222     		mov	r2, #2
 302 005e 1A70     		strb	r2, [r3]
 118:../Sources/ProcessorExpert.c ****       Error = I2C2_MasterReceiveBlock(MyI2CPtr, &InData, MMA845X_BUFFER_SIZE, LDD_I2C_SEND_STOP);
 303              		.loc 1 118 0
 304 0060 2E4B     		ldr	r3, .L20+12
 305 0062 1A68     		ldr	r2, [r3]
 306 0064 304B     		ldr	r3, .L20+24
 307 0066 101C     		mov	r0, r2
 308 0068 191C     		mov	r1, r3
 309 006a 0622     		mov	r2, #6
 310 006c 0123     		mov	r3, #1
 311 006e FFF7FEFF 		bl	I2C2_MasterReceiveBlock
 312 0072 031C     		mov	r3, r0
 313 0074 1A1C     		mov	r2, r3
 314 0076 2A4B     		ldr	r3, .L20+16
 315 0078 1A80     		strh	r2, [r3]
 119:../Sources/ProcessorExpert.c ****       while (!DataReceivedFlg);
 316              		.loc 1 119 0
 317 007a C046     		mov	r8, r8
 318              	.L16:
 319              		.loc 1 119 0 is_stmt 0
 320 007c 2B4B     		ldr	r3, .L20+28
 321 007e 1B78     		ldrb	r3, [r3]
 322 0080 DBB2     		uxtb	r3, r3
 323 0082 002B     		cmp	r3, #0
 324 0084 FAD0     		beq	.L16
 120:../Sources/ProcessorExpert.c ****       DataReceivedFlg = FALSE;  
 325              		.loc 1 120 0 is_stmt 1
 326 0086 294B     		ldr	r3, .L20+28
 327 0088 0022     		mov	r2, #0
 328 008a 1A70     		strb	r2, [r3]
 121:../Sources/ProcessorExpert.c **** 
 122:../Sources/ProcessorExpert.c ****       mma845_tmp = InData[1] | (InData[0] << 8);
 329              		.loc 1 122 0
 330 008c 264B     		ldr	r3, .L20+24
 331 008e 5B78     		ldrb	r3, [r3, #1]
 332 0090 1A1C     		mov	r2, r3
 333 0092 254B     		ldr	r3, .L20+24
 334 0094 1B78     		ldrb	r3, [r3]
 335 0096 1B02     		lsl	r3, r3, #8
 336 0098 9BB2     		uxth	r3, r3
 337 009a 1343     		orr	r3, r2
 338 009c 9AB2     		uxth	r2, r3
 339 009e 244B     		ldr	r3, .L20+32
 340 00a0 1A80     		strh	r2, [r3]
 123:../Sources/ProcessorExpert.c ****       mma845x.x = (mma845_tmp / MMA845X_DIVIDER);
 341              		.loc 1 123 0
 342 00a2 234B     		ldr	r3, .L20+32
 343 00a4 1B88     		ldrh	r3, [r3]
 344 00a6 1BB2     		sxth	r3, r3
 345 00a8 002B     		cmp	r3, #0
 346 00aa 00DA     		bge	.L17
 347 00ac 0333     		add	r3, r3, #3
 348              	.L17:
 349 00ae 9B10     		asr	r3, r3, #2
 350 00b0 9AB2     		uxth	r2, r3
 351 00b2 204B     		ldr	r3, .L20+36
 352 00b4 1A80     		strh	r2, [r3]
 124:../Sources/ProcessorExpert.c **** 
 125:../Sources/ProcessorExpert.c ****       mma845_tmp = InData[3] | (InData[2] << 8);
 353              		.loc 1 125 0
 354 00b6 1C4B     		ldr	r3, .L20+24
 355 00b8 DB78     		ldrb	r3, [r3, #3]
 356 00ba 1A1C     		mov	r2, r3
 357 00bc 1A4B     		ldr	r3, .L20+24
 358 00be 9B78     		ldrb	r3, [r3, #2]
 359 00c0 1B02     		lsl	r3, r3, #8
 360 00c2 9BB2     		uxth	r3, r3
 361 00c4 1343     		orr	r3, r2
 362 00c6 9AB2     		uxth	r2, r3
 363 00c8 194B     		ldr	r3, .L20+32
 364 00ca 1A80     		strh	r2, [r3]
 126:../Sources/ProcessorExpert.c ****       mma845x.y = (mma845_tmp / MMA845X_DIVIDER);
 365              		.loc 1 126 0
 366 00cc 184B     		ldr	r3, .L20+32
 367 00ce 1B88     		ldrh	r3, [r3]
 368 00d0 1BB2     		sxth	r3, r3
 369 00d2 002B     		cmp	r3, #0
 370 00d4 00DA     		bge	.L18
 371 00d6 0333     		add	r3, r3, #3
 372              	.L18:
 373 00d8 9B10     		asr	r3, r3, #2
 374 00da 9AB2     		uxth	r2, r3
 375 00dc 154B     		ldr	r3, .L20+36
 376 00de 5A80     		strh	r2, [r3, #2]
 127:../Sources/ProcessorExpert.c **** 
 128:../Sources/ProcessorExpert.c ****       mma845_tmp = InData[5] | (InData[4] << 8);     
 377              		.loc 1 128 0
 378 00e0 114B     		ldr	r3, .L20+24
 379 00e2 5B79     		ldrb	r3, [r3, #5]
 380 00e4 1A1C     		mov	r2, r3
 381 00e6 104B     		ldr	r3, .L20+24
 382 00e8 1B79     		ldrb	r3, [r3, #4]
 383 00ea 1B02     		lsl	r3, r3, #8
 384 00ec 9BB2     		uxth	r3, r3
 385 00ee 1343     		orr	r3, r2
 386 00f0 9AB2     		uxth	r2, r3
 387 00f2 0F4B     		ldr	r3, .L20+32
 388 00f4 1A80     		strh	r2, [r3]
 129:../Sources/ProcessorExpert.c ****       mma845x.z = (mma845_tmp / MMA845X_DIVIDER);   
 389              		.loc 1 129 0
 390 00f6 0E4B     		ldr	r3, .L20+32
 391 00f8 1B88     		ldrh	r3, [r3]
 392 00fa 1BB2     		sxth	r3, r3
 393 00fc 002B     		cmp	r3, #0
 394 00fe 00DA     		bge	.L19
 395 0100 0333     		add	r3, r3, #3
 396              	.L19:
 397 0102 9B10     		asr	r3, r3, #2
 398 0104 9AB2     		uxth	r2, r3
 399 0106 0B4B     		ldr	r3, .L20+36
 400 0108 9A80     		strh	r2, [r3, #4]
 401              	.L12:
 130:../Sources/ProcessorExpert.c **** 
 131:../Sources/ProcessorExpert.c ****       //printf("%d", mma845x.y);
 132:../Sources/ProcessorExpert.c ****       //printf("\n");
 133:../Sources/ProcessorExpert.c ****     }
 134:../Sources/ProcessorExpert.c **** }
 402              		.loc 1 134 0
 403 010a BD46     		mov	sp, r7
 404              		@ sp needed for prologue
 405 010c 80BD     		pop	{r7, pc}
 406              	.L21:
 407 010e C046     		.align	2
 408              	.L20:
 409 0110 00000000 		.word	measuring
 410 0114 00000000 		.word	measuring_last
 411 0118 00000000 		.word	OutData
 412 011c 00000000 		.word	MyI2CPtr
 413 0120 00000000 		.word	Error
 414 0124 00000000 		.word	DataTransmittedFlg
 415 0128 00000000 		.word	InData
 416 012c 00000000 		.word	DataReceivedFlg
 417 0130 00000000 		.word	mma845_tmp
 418 0134 00000000 		.word	mma845x
 419              		.cfi_endproc
 420              	.LFE2:
 422              		.section	.rodata
 423              		.align	2
 424              	.LC22:
 425 0000 74696C74 		.ascii	"tilt =  %d  ang_pos =  %d\000"
 425      203D2020 
 425      25642020 
 425      616E675F 
 425      706F7320 
 426 001a 0000     		.section	.text.main,"ax",%progbits
 427              		.align	2
 428              		.global	main
 429              		.code	16
 430              		.thumb_func
 432              	main:
 433              	.LFB3:
 135:../Sources/ProcessorExpert.c **** 
 136:../Sources/ProcessorExpert.c **** 
 137:../Sources/ProcessorExpert.c **** 
 138:../Sources/ProcessorExpert.c **** int main(void)
 139:../Sources/ProcessorExpert.c **** 
 140:../Sources/ProcessorExpert.c **** {
 434              		.loc 1 140 0
 435              		.cfi_startproc
 436 0000 80B5     		push	{r7, lr}
 437              	.LCFI6:
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 7, -8
 440              		.cfi_offset 14, -4
 441 0002 00AF     		add	r7, sp, #0
 442              	.LCFI7:
 443              		.cfi_def_cfa_register 7
 141:../Sources/ProcessorExpert.c **** 	int i,data;
 142:../Sources/ProcessorExpert.c ****   /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
 143:../Sources/ProcessorExpert.c ****   PE_low_level_init();
 444              		.loc 1 143 0
 445 0004 FFF7FEFF 		bl	PE_low_level_init
 144:../Sources/ProcessorExpert.c ****   /*** End of Processor Expert internal initialization.                    ***/
 145:../Sources/ProcessorExpert.c **** 
 146:../Sources/ProcessorExpert.c ****   // Inicjacja I2C
 147:../Sources/ProcessorExpert.c ****   MyI2CPtr = I2C2_Init(NULL);
 446              		.loc 1 147 0
 447 0008 0020     		mov	r0, #0
 448 000a FFF7FEFF 		bl	I2C2_Init
 449 000e 021C     		mov	r2, r0
 450 0010 0F4B     		ldr	r3, .L24
 451 0012 1A60     		str	r2, [r3]
 148:../Sources/ProcessorExpert.c ****  
 149:../Sources/ProcessorExpert.c ****   // Inicjacja Timera
 150:../Sources/ProcessorExpert.c ****   MyTimerPtr = TU1_Init(NULL);
 452              		.loc 1 150 0
 453 0014 0020     		mov	r0, #0
 454 0016 FFF7FEFF 		bl	TU1_Init
 455 001a 021C     		mov	r2, r0
 456 001c 0D4B     		ldr	r3, .L24+4
 457 001e 1A60     		str	r2, [r3]
 151:../Sources/ProcessorExpert.c **** 
 152:../Sources/ProcessorExpert.c ****   
 153:../Sources/ProcessorExpert.c ****     // Inicjacja Akcelerometru MMA855X
 154:../Sources/ProcessorExpert.c ****   MMA845X_Init();
 458              		.loc 1 154 0
 459 0020 FFF7FEFF 		bl	MMA845X_Init
 155:../Sources/ProcessorExpert.c ****   AS5040_Init();
 460              		.loc 1 155 0
 461 0024 FFF7FEFF 		bl	AS5040_Init
 462              	.L23:
 156:../Sources/ProcessorExpert.c ****   
 157:../Sources/ProcessorExpert.c ****   for(;;)
 158:../Sources/ProcessorExpert.c ****   {
 159:../Sources/ProcessorExpert.c **** //	  i++;
 160:../Sources/ProcessorExpert.c **** //	 WAIT1_WaitOSms(1);
 161:../Sources/ProcessorExpert.c **** //	 if(i%25==0)
 162:../Sources/ProcessorExpert.c **** //	 LED1_Neg();
 163:../Sources/ProcessorExpert.c **** 	 AS5040_data_parser();
 463              		.loc 1 163 0
 464 0028 FFF7FEFF 		bl	AS5040_data_parser
 164:../Sources/ProcessorExpert.c **** 	 MMA845X_Poll();
 465              		.loc 1 164 0
 466 002c FFF7FEFF 		bl	MMA845X_Poll
 165:../Sources/ProcessorExpert.c **** //    data=AS5040_Data_read();
 166:../Sources/ProcessorExpert.c **** 
 167:../Sources/ProcessorExpert.c **** //    printf("data =  %x", data);
 168:../Sources/ProcessorExpert.c **** //    printf("\n");
 169:../Sources/ProcessorExpert.c **** //    printf("ocf =  %d", as5040data.ocf);
 170:../Sources/ProcessorExpert.c **** //    printf("\n");
 171:../Sources/ProcessorExpert.c **** //    printf("cof =  %d", as5040data.cof);
 172:../Sources/ProcessorExpert.c **** //    printf("\n");
 173:../Sources/ProcessorExpert.c **** //    printf("lin =  %d", as5040data.lin);
 174:../Sources/ProcessorExpert.c **** //    printf("\n");
 175:../Sources/ProcessorExpert.c **** //    printf("MAGdec =  %d", as5040data.MAG_dec);
 176:../Sources/ProcessorExpert.c **** //    printf("\n");
 177:../Sources/ProcessorExpert.c **** //    printf("MAGinc =  %d", as5040data.MAG_inc);
 178:../Sources/ProcessorExpert.c **** //    printf("\n");
 179:../Sources/ProcessorExpert.c **** 	printf("tilt =  %d  ang_pos =  %d", mma845x.y, as5040data.ang_position);
 467              		.loc 1 179 0
 468 0030 094B     		ldr	r3, .L24+8
 469 0032 5B88     		ldrh	r3, [r3, #2]
 470 0034 1AB2     		sxth	r2, r3
 471 0036 094B     		ldr	r3, .L24+12
 472 0038 1B88     		ldrh	r3, [r3]
 473 003a 1BB2     		sxth	r3, r3
 474 003c 0849     		ldr	r1, .L24+16
 475 003e 081C     		mov	r0, r1
 476 0040 111C     		mov	r1, r2
 477 0042 1A1C     		mov	r2, r3
 478 0044 FFF7FEFF 		bl	printf
 180:../Sources/ProcessorExpert.c **** 	printf("\n");
 479              		.loc 1 180 0
 480 0048 0A20     		mov	r0, #10
 481 004a FFF7FEFF 		bl	putchar
 181:../Sources/ProcessorExpert.c **** 
 182:../Sources/ProcessorExpert.c ****   }
 482              		.loc 1 182 0
 483 004e EBE7     		b	.L23
 484              	.L25:
 485              		.align	2
 486              	.L24:
 487 0050 00000000 		.word	MyI2CPtr
 488 0054 00000000 		.word	MyTimerPtr
 489 0058 00000000 		.word	mma845x
 490 005c 00000000 		.word	as5040data
 491 0060 00000000 		.word	.LC22
 492              		.cfi_endproc
 493              	.LFE3:
 495              		.text
 496              	.Letext0:
 497              		.file 2 "D:/CodeWarrior/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 498              		.file 3 "D:/PlikiI/Synergia/Jacht/workspace_yacht/I2C_1/Generated_Code/PE_Types.h"
 499              		.file 4 "../Sources/ProcessorExpert.h"
 500              		.file 5 "../Sources/AS5040.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ProcessorExpert.c
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:21     .bss.DataReceivedFlg:00000000 DataReceivedFlg
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:22     .bss.DataReceivedFlg:00000000 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:27     .bss.DataTransmittedFlg:00000000 DataTransmittedFlg
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:28     .bss.DataTransmittedFlg:00000000 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:34     .data.OutData:00000000 OutData
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:31     .data.OutData:00000000 $d
                            *COM*:00000006 InData
                            *COM*:00000002 Error
                            *COM*:00000004 MyI2CPtr
                            *COM*:00000004 MyTimerPtr
                            *COM*:00000008 mma845x
                            *COM*:00000002 mma845_tmp
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:46     .bss.measuring:00000000 measuring
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:47     .bss.measuring:00000000 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:51     .data.measuring_last:00000000 measuring_last
                            *COM*:00000002 data
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:55     .text.Timer_Interrupt_CB:00000000 $t
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:60     .text.Timer_Interrupt_CB:00000000 Timer_Interrupt_CB
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:106    .text.Timer_Interrupt_CB:00000030 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:112    .text.MMA845X_Init:00000000 $t
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:117    .text.MMA845X_Init:00000000 MMA845X_Init
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:218    .text.MMA845X_Init:00000094 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:228    .text.MMA845X_Poll:00000000 $t
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:233    .text.MMA845X_Poll:00000000 MMA845X_Poll
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:409    .text.MMA845X_Poll:00000110 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:423    .rodata:00000000 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:427    .text.main:00000000 $t
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:432    .text.main:00000000 main
C:\Users\SKRA~1\AppData\Local\Temp\ccuaiAEd.s:487    .text.main:00000050 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
I2C2_MasterSendBlock
I2C2_MasterReceiveBlock
PE_low_level_init
I2C2_Init
TU1_Init
AS5040_Init
AS5040_data_parser
printf
putchar
as5040data
