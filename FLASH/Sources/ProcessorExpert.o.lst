   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ProcessorExpert.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	InData,6,4
  18              		.comm	mma845_tmp,2,2
  19              		.comm	LtcInData,7,4
  20              		.comm	MyI2CPtr,4,4
  21              		.comm	MyTimerPtr,4,4
  22              		.comm	Myout_I2CPtr,4,4
  23              		.section	.bss.ADC_value,"aw",%nobits
  24              		.align	2
  27              	ADC_value:
  28 0000 00000000 		.space	4
  29              		.comm	ADC_koniec,1,1
  30              		.comm	Voltage,4,4
  31              		.comm	Current,4,4
  32              		.comm	Power,4,4
  33              		.comm	volt,4,4
  34              		.comm	powe,4,4
  35              		.comm	curr,4,4
  36              		.global	__aeabi_fmul
  37              		.global	__aeabi_f2iz
  38              		.section	.rodata
  39              		.align	2
  40              	.LC14:
  41 0000 25642C25 		.ascii	"%d,%d \012\000"
  41      64200A00 
  42              		.section	.text.main,"ax",%progbits
  43              		.align	2
  44              		.global	main
  45              		.code	16
  46              		.thumb_func
  48              	main:
  49              	.LFB0:
  50              		.file 1 "../Sources/ProcessorExpert.c"
   1:../Sources/ProcessorExpert.c **** /** ###################################################################
   2:../Sources/ProcessorExpert.c **** **     Filename    : ProcessorExpert.c
   3:../Sources/ProcessorExpert.c **** **     Project     : ProcessorExpert
   4:../Sources/ProcessorExpert.c **** **     Processor   : MKL25Z128VLK4
   5:../Sources/ProcessorExpert.c **** **     Version     : Driver 01.01
   6:../Sources/ProcessorExpert.c **** **     Compiler    : IAR ARM C Compiler
   7:../Sources/ProcessorExpert.c **** **     Date/Time   : 2012-08-27, 15:21, # CodeGen: 0
   8:../Sources/ProcessorExpert.c **** **     Abstract    :
   9:../Sources/ProcessorExpert.c **** **         Main module.
  10:../Sources/ProcessorExpert.c **** **         This module contains user's application code.
  11:../Sources/ProcessorExpert.c **** **     Settings    :
  12:../Sources/ProcessorExpert.c **** **     Contents    :
  13:../Sources/ProcessorExpert.c **** **         No public methods
  14:../Sources/ProcessorExpert.c **** **
  15:../Sources/ProcessorExpert.c **** ** ###################################################################*/
  16:../Sources/ProcessorExpert.c **** /* MODULE ProcessorExpert */
  17:../Sources/ProcessorExpert.c **** 
  18:../Sources/ProcessorExpert.c **** 
  19:../Sources/ProcessorExpert.c **** /* Including needed modules to compile this module/procedure */
  20:../Sources/ProcessorExpert.c **** #include "Cpu.h"
  21:../Sources/ProcessorExpert.c **** #include "Events.h"
  22:../Sources/ProcessorExpert.c **** #include "I2C2.h"
  23:../Sources/ProcessorExpert.c **** #include "out_I2C.h"
  24:../Sources/ProcessorExpert.c **** #include "AD1.h"
  25:../Sources/ProcessorExpert.c **** #include "AdcLdd1.h"
  26:../Sources/ProcessorExpert.c **** #include "IO1.h"
  27:../Sources/ProcessorExpert.c **** #include "WAIT1.h"
  28:../Sources/ProcessorExpert.c **** #include "LEDgreen.h"
  29:../Sources/ProcessorExpert.c **** #include "LEDpin1.h"
  30:../Sources/ProcessorExpert.c **** #include "BitIoLdd1.h"
  31:../Sources/ProcessorExpert.c **** #include "LEDred.h"
  32:../Sources/ProcessorExpert.c **** #include "LEDpin2.h"
  33:../Sources/ProcessorExpert.c **** #include "BitIoLdd2.h"
  34:../Sources/ProcessorExpert.c **** #include "out_I2C.h"
  35:../Sources/ProcessorExpert.c **** #include "TU1.h"
  36:../Sources/ProcessorExpert.c **** #include "CsIO1.h"
  37:../Sources/ProcessorExpert.c **** /* Including shared modules, which are used for whole project */
  38:../Sources/ProcessorExpert.c **** #include "PE_Types.h"
  39:../Sources/ProcessorExpert.c **** #include "PE_Error.h"
  40:../Sources/ProcessorExpert.c **** #include "PE_Const.h"
  41:../Sources/ProcessorExpert.c **** #include "IO_Map.h"
  42:../Sources/ProcessorExpert.c **** 
  43:../Sources/ProcessorExpert.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  44:../Sources/ProcessorExpert.c **** #include "stdio.h"
  45:../Sources/ProcessorExpert.c **** #include "AS5040.h"
  46:../Sources/ProcessorExpert.c **** #include "mma8453.h"
  47:../Sources/ProcessorExpert.c **** #include "LTC2945.h"
  48:../Sources/ProcessorExpert.c **** #include "adc_data.h"
  49:../Sources/ProcessorExpert.c **** 
  50:../Sources/ProcessorExpert.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  51:../Sources/ProcessorExpert.c **** extern AS5040data as5040data;
  52:../Sources/ProcessorExpert.c **** extern MMA845X mma845x;
  53:../Sources/ProcessorExpert.c **** extern LTC2945 ltc2945;
  54:../Sources/ProcessorExpert.c **** 
  55:../Sources/ProcessorExpert.c **** 
  56:../Sources/ProcessorExpert.c **** LDD_TDeviceData *MyI2CPtr;
  57:../Sources/ProcessorExpert.c **** LDD_TDeviceData *MyTimerPtr;
  58:../Sources/ProcessorExpert.c **** LDD_TDeviceData *Myout_I2CPtr;
  59:../Sources/ProcessorExpert.c **** 
  60:../Sources/ProcessorExpert.c **** 
  61:../Sources/ProcessorExpert.c **** 
  62:../Sources/ProcessorExpert.c **** static uint16_t ADC_value[AD1_CHANNEL_COUNT];
  63:../Sources/ProcessorExpert.c **** volatile bool ADC_koniec;
  64:../Sources/ProcessorExpert.c **** float Voltage;
  65:../Sources/ProcessorExpert.c **** float Current;
  66:../Sources/ProcessorExpert.c **** float Power;
  67:../Sources/ProcessorExpert.c **** 
  68:../Sources/ProcessorExpert.c **** int volt;
  69:../Sources/ProcessorExpert.c **** int powe;
  70:../Sources/ProcessorExpert.c **** int curr;
  71:../Sources/ProcessorExpert.c **** 
  72:../Sources/ProcessorExpert.c **** int main(void)
  73:../Sources/ProcessorExpert.c **** {
  51              		.loc 1 73 0
  52              		.cfi_startproc
  53 0000 80B5     		push	{r7, lr}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 7, -8
  57              		.cfi_offset 14, -4
  58 0002 82B0     		sub	sp, sp, #8
  59              	.LCFI1:
  60              		.cfi_def_cfa_offset 16
  61 0004 00AF     		add	r7, sp, #0
  62              	.LCFI2:
  63              		.cfi_def_cfa_register 7
  74:../Sources/ProcessorExpert.c **** 	uint16_t i=0;
  64              		.loc 1 74 0
  65 0006 BB1D     		add	r3, r7, #6
  66 0008 0022     		mov	r2, #0
  67 000a 1A80     		strh	r2, [r3]
  75:../Sources/ProcessorExpert.c **** 
  76:../Sources/ProcessorExpert.c **** 	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  77:../Sources/ProcessorExpert.c **** 	PE_low_level_init();
  68              		.loc 1 77 0
  69 000c FFF7FEFF 		bl	PE_low_level_init
  78:../Sources/ProcessorExpert.c **** 	/*** End of Processor Expert internal initialization. 
  79:../Sources/ProcessorExpert.c **** 	 *                    ***/
  80:../Sources/ProcessorExpert.c **** 	LEDred_Off();
  70              		.loc 1 80 0
  71 0010 454B     		ldr	r3, .L4
  72 0012 1B69     		ldr	r3, [r3, #16]
  73 0014 181C     		mov	r0, r3
  74 0016 FFF7FEFF 		bl	BitIoLdd2_SetVal
  81:../Sources/ProcessorExpert.c **** 	LEDgreen_Off();
  75              		.loc 1 81 0
  76 001a 434B     		ldr	r3, .L4
  77 001c DB68     		ldr	r3, [r3, #12]
  78 001e 181C     		mov	r0, r3
  79 0020 FFF7FEFF 		bl	BitIoLdd1_SetVal
  82:../Sources/ProcessorExpert.c **** 	// Inicjacja I2C
  83:../Sources/ProcessorExpert.c **** 	MyI2CPtr = I2C2_Init(NULL); //mma88453
  80              		.loc 1 83 0
  81 0024 0020     		mov	r0, #0
  82 0026 FFF7FEFF 		bl	I2C2_Init
  83 002a 021C     		mov	r2, r0
  84 002c 3F4B     		ldr	r3, .L4+4
  85 002e 1A60     		str	r2, [r3]
  84:../Sources/ProcessorExpert.c **** 	Myout_I2CPtr = out_I2C_Init(NULL); //LTC2945
  86              		.loc 1 84 0
  87 0030 0020     		mov	r0, #0
  88 0032 FFF7FEFF 		bl	out_I2C_Init
  89 0036 021C     		mov	r2, r0
  90 0038 3D4B     		ldr	r3, .L4+8
  91 003a 1A60     		str	r2, [r3]
  85:../Sources/ProcessorExpert.c **** 	// Inicjacja Timera (for I2C)
  86:../Sources/ProcessorExpert.c **** 	MyTimerPtr = TU1_Init(NULL);
  92              		.loc 1 86 0
  93 003c 0020     		mov	r0, #0
  94 003e FFF7FEFF 		bl	TU1_Init
  95 0042 021C     		mov	r2, r0
  96 0044 3B4B     		ldr	r3, .L4+12
  97 0046 1A60     		str	r2, [r3]
  87:../Sources/ProcessorExpert.c **** 
  88:../Sources/ProcessorExpert.c **** 
  89:../Sources/ProcessorExpert.c **** 	// Inicjacja Akcelerometru MMA855X
  90:../Sources/ProcessorExpert.c **** 	MMA845X_Init();
  98              		.loc 1 90 0
  99 0048 FFF7FEFF 		bl	MMA845X_Init
  91:../Sources/ProcessorExpert.c **** 	//LTC2945_Init();
  92:../Sources/ProcessorExpert.c **** 	AS5040_Init();
 100              		.loc 1 92 0
 101 004c FFF7FEFF 		bl	AS5040_Init
  93:../Sources/ProcessorExpert.c **** 	(void)AD1_Measure(TRUE);
 102              		.loc 1 93 0
 103 0050 0120     		mov	r0, #1
 104 0052 FFF7FEFF 		bl	AD1_Measure
 105              	.L3:
  94:../Sources/ProcessorExpert.c **** 	
  95:../Sources/ProcessorExpert.c **** 
  96:../Sources/ProcessorExpert.c **** 	for(;;)
  97:../Sources/ProcessorExpert.c **** 	{
  98:../Sources/ProcessorExpert.c **** 		//	  i++;
  99:../Sources/ProcessorExpert.c **** 		//	 WAIT1_WaitOSms(10);
 100:../Sources/ProcessorExpert.c **** 		//	 if(i%25==0)
 101:../Sources/ProcessorExpert.c **** 		//	 LEDgreen_Neg();
 102:../Sources/ProcessorExpert.c **** 		AS5040_data_parser();
 106              		.loc 1 102 0
 107 0056 FFF7FEFF 		bl	AS5040_data_parser
 103:../Sources/ProcessorExpert.c **** 		MMA845X_Poll();
 108              		.loc 1 103 0
 109 005a FFF7FEFF 		bl	MMA845X_Poll
 104:../Sources/ProcessorExpert.c **** 		//LTC2945_Poll();
 105:../Sources/ProcessorExpert.c **** 		if (ADC_koniec){
 110              		.loc 1 105 0
 111 005e 364B     		ldr	r3, .L4+16
 112 0060 1B78     		ldrb	r3, [r3]
 113 0062 DBB2     		uxtb	r3, r3
 114 0064 002B     		cmp	r3, #0
 115 0066 09D0     		beq	.L2
 106:../Sources/ProcessorExpert.c **** 		(void)AD1_GetValue16(&ADC_value[0]);
 116              		.loc 1 106 0
 117 0068 344B     		ldr	r3, .L4+20
 118 006a 181C     		mov	r0, r3
 119 006c FFF7FEFF 		bl	AD1_GetValue16
 107:../Sources/ProcessorExpert.c **** 		ADC_koniec=FALSE;
 120              		.loc 1 107 0
 121 0070 314B     		ldr	r3, .L4+16
 122 0072 0022     		mov	r2, #0
 123 0074 1A70     		strb	r2, [r3]
 108:../Sources/ProcessorExpert.c **** 		(void)AD1_Measure(TRUE);
 124              		.loc 1 108 0
 125 0076 0120     		mov	r0, #1
 126 0078 FFF7FEFF 		bl	AD1_Measure
 127              	.L2:
 109:../Sources/ProcessorExpert.c **** 		}
 110:../Sources/ProcessorExpert.c **** 		
 111:../Sources/ProcessorExpert.c **** 		
 112:../Sources/ProcessorExpert.c **** 		Voltage=vlotage_scaling(ADC_value[1]);
 128              		.loc 1 112 0
 129 007c 2F4B     		ldr	r3, .L4+20
 130 007e 5B88     		ldrh	r3, [r3, #2]
 131 0080 181C     		mov	r0, r3
 132 0082 FFF7FEFF 		bl	vlotage_scaling
 133 0086 021C     		add	r2, r0, #0
 134 0088 2D4B     		ldr	r3, .L4+24
 135 008a 1A60     		str	r2, [r3]
 113:../Sources/ProcessorExpert.c **** 		Current=copm_current(vlotage_scaling(ADC_value[0]),Voltage);
 136              		.loc 1 113 0
 137 008c 2B4B     		ldr	r3, .L4+20
 138 008e 1B88     		ldrh	r3, [r3]
 139 0090 181C     		mov	r0, r3
 140 0092 FFF7FEFF 		bl	vlotage_scaling
 141 0096 021C     		add	r2, r0, #0
 142 0098 294B     		ldr	r3, .L4+24
 143 009a 1B68     		ldr	r3, [r3]
 144 009c 101C     		add	r0, r2, #0
 145 009e 191C     		add	r1, r3, #0
 146 00a0 FFF7FEFF 		bl	copm_current
 147 00a4 021C     		add	r2, r0, #0
 148 00a6 274B     		ldr	r3, .L4+28
 149 00a8 1A60     		str	r2, [r3]
 114:../Sources/ProcessorExpert.c **** 		Power=copm_current(Current,Voltage);
 150              		.loc 1 114 0
 151 00aa 264B     		ldr	r3, .L4+28
 152 00ac 1A68     		ldr	r2, [r3]
 153 00ae 244B     		ldr	r3, .L4+24
 154 00b0 1B68     		ldr	r3, [r3]
 155 00b2 101C     		add	r0, r2, #0
 156 00b4 191C     		add	r1, r3, #0
 157 00b6 FFF7FEFF 		bl	copm_current
 158 00ba 021C     		add	r2, r0, #0
 159 00bc 224B     		ldr	r3, .L4+32
 160 00be 1A60     		str	r2, [r3]
 115:../Sources/ProcessorExpert.c **** 		
 116:../Sources/ProcessorExpert.c **** 		volt=Voltage*1000;
 161              		.loc 1 116 0
 162 00c0 1F4B     		ldr	r3, .L4+24
 163 00c2 1B68     		ldr	r3, [r3]
 164 00c4 181C     		add	r0, r3, #0
 165 00c6 2149     		ldr	r1, .L4+36
 166 00c8 FFF7FEFF 		bl	__aeabi_fmul
 167 00cc 031C     		add	r3, r0, #0
 168 00ce 181C     		add	r0, r3, #0
 169 00d0 FFF7FEFF 		bl	__aeabi_f2iz
 170 00d4 021C     		mov	r2, r0
 171 00d6 1E4B     		ldr	r3, .L4+40
 172 00d8 1A60     		str	r2, [r3]
 117:../Sources/ProcessorExpert.c **** 		curr=Current*1000;
 173              		.loc 1 117 0
 174 00da 1A4B     		ldr	r3, .L4+28
 175 00dc 1B68     		ldr	r3, [r3]
 176 00de 181C     		add	r0, r3, #0
 177 00e0 1A49     		ldr	r1, .L4+36
 178 00e2 FFF7FEFF 		bl	__aeabi_fmul
 179 00e6 031C     		add	r3, r0, #0
 180 00e8 181C     		add	r0, r3, #0
 181 00ea FFF7FEFF 		bl	__aeabi_f2iz
 182 00ee 021C     		mov	r2, r0
 183 00f0 184B     		ldr	r3, .L4+44
 184 00f2 1A60     		str	r2, [r3]
 118:../Sources/ProcessorExpert.c **** 		powe=Power*1000;
 185              		.loc 1 118 0
 186 00f4 144B     		ldr	r3, .L4+32
 187 00f6 1B68     		ldr	r3, [r3]
 188 00f8 181C     		add	r0, r3, #0
 189 00fa 1449     		ldr	r1, .L4+36
 190 00fc FFF7FEFF 		bl	__aeabi_fmul
 191 0100 031C     		add	r3, r0, #0
 192 0102 181C     		add	r0, r3, #0
 193 0104 FFF7FEFF 		bl	__aeabi_f2iz
 194 0108 021C     		mov	r2, r0
 195 010a 134B     		ldr	r3, .L4+48
 196 010c 1A60     		str	r2, [r3]
 119:../Sources/ProcessorExpert.c **** 		
 120:../Sources/ProcessorExpert.c **** 		printf("%d,%d \n", as5040data.ang_position,mma845x.y);
 197              		.loc 1 120 0
 198 010e 134B     		ldr	r3, .L4+52
 199 0110 1B88     		ldrh	r3, [r3]
 200 0112 1AB2     		sxth	r2, r3
 201 0114 124B     		ldr	r3, .L4+56
 202 0116 5B88     		ldrh	r3, [r3, #2]
 203 0118 1BB2     		sxth	r3, r3
 204 011a 1249     		ldr	r1, .L4+60
 205 011c 081C     		mov	r0, r1
 206 011e 111C     		mov	r1, r2
 207 0120 1A1C     		mov	r2, r3
 208 0122 FFF7FEFF 		bl	printf
 121:../Sources/ProcessorExpert.c **** 		
 122:../Sources/ProcessorExpert.c **** //		if(as5040data.Erorr){
 123:../Sources/ProcessorExpert.c **** //			LEDgreen_Off();
 124:../Sources/ProcessorExpert.c **** //			LEDred_On();
 125:../Sources/ProcessorExpert.c **** //			printf("tilt =  %d  ang_pos =ERORR  U: %d I: %d P: %d", mma845x.y,  ADC_value[0],ADC_value[1],
 126:../Sources/ProcessorExpert.c **** //			printf("\n");
 127:../Sources/ProcessorExpert.c **** //		}
 128:../Sources/ProcessorExpert.c **** //		else{
 129:../Sources/ProcessorExpert.c **** //			LEDgreen_On();
 130:../Sources/ProcessorExpert.c **** //			LEDred_Off();
 131:../Sources/ProcessorExpert.c **** //			printf("tilt =  %d  ang_pos =  %d  U: %d I: %d P: %d", mma845x.y, as5040data.ang_position, ADC
 132:../Sources/ProcessorExpert.c **** //			printf("\n");
 133:../Sources/ProcessorExpert.c **** //		}
 134:../Sources/ProcessorExpert.c **** 
 135:../Sources/ProcessorExpert.c **** 
 136:../Sources/ProcessorExpert.c **** 	}
 209              		.loc 1 136 0
 210 0126 96E7     		b	.L3
 211              	.L5:
 212              		.align	2
 213              	.L4:
 214 0128 00000000 		.word	PE_LDD_DeviceDataList
 215 012c 00000000 		.word	MyI2CPtr
 216 0130 00000000 		.word	Myout_I2CPtr
 217 0134 00000000 		.word	MyTimerPtr
 218 0138 00000000 		.word	ADC_koniec
 219 013c 00000000 		.word	ADC_value
 220 0140 00000000 		.word	Voltage
 221 0144 00000000 		.word	Current
 222 0148 00000000 		.word	Power
 223 014c 00007A44 		.word	1148846080
 224 0150 00000000 		.word	volt
 225 0154 00000000 		.word	curr
 226 0158 00000000 		.word	powe
 227 015c 00000000 		.word	as5040data
 228 0160 00000000 		.word	mma845x
 229 0164 00000000 		.word	.LC14
 230              		.cfi_endproc
 231              	.LFE0:
 233              		.text
 234              	.Letext0:
 235              		.file 2 "D:/CodeWarrior/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 236              		.file 3 "D:/PlikiI/Synergia/Jacht/workspace_yacht/I2C_1/Generated_Code/PE_Types.h"
 237              		.file 4 "../Sources/AS5040.h"
 238              		.file 5 "../Sources/mma8453.h"
 239              		.file 6 "../Sources/LTC2945.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ProcessorExpert.c
                            *COM*:00000006 InData
                            *COM*:00000002 mma845_tmp
                            *COM*:00000007 LtcInData
                            *COM*:00000004 MyI2CPtr
                            *COM*:00000004 MyTimerPtr
                            *COM*:00000004 Myout_I2CPtr
C:\Users\SKRA~1\AppData\Local\Temp\ccEFiNlk.s:24     .bss.ADC_value:00000000 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccEFiNlk.s:27     .bss.ADC_value:00000000 ADC_value
                            *COM*:00000001 ADC_koniec
                            *COM*:00000004 Voltage
                            *COM*:00000004 Current
                            *COM*:00000004 Power
                            *COM*:00000004 volt
                            *COM*:00000004 powe
                            *COM*:00000004 curr
C:\Users\SKRA~1\AppData\Local\Temp\ccEFiNlk.s:39     .rodata:00000000 $d
C:\Users\SKRA~1\AppData\Local\Temp\ccEFiNlk.s:43     .text.main:00000000 $t
C:\Users\SKRA~1\AppData\Local\Temp\ccEFiNlk.s:48     .text.main:00000000 main
C:\Users\SKRA~1\AppData\Local\Temp\ccEFiNlk.s:214    .text.main:00000128 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fmul
__aeabi_f2iz
PE_low_level_init
BitIoLdd2_SetVal
BitIoLdd1_SetVal
I2C2_Init
out_I2C_Init
TU1_Init
MMA845X_Init
AS5040_Init
AD1_Measure
AS5040_data_parser
MMA845X_Poll
AD1_GetValue16
vlotage_scaling
copm_current
printf
PE_LDD_DeviceDataList
as5040data
mma845x
